<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Engineering Fantasy</title><link href="http://nafiulis.me/" rel="alternate"></link><link href="http://nafiulis.me/feeds/programming.atom.xml" rel="self"></link><id>http://nafiulis.me/</id><updated>2018-02-03T21:41:00+06:00</updated><entry><title>What Heroku Should Do</title><link href="http://nafiulis.me/what-Heroku-should-do.html" rel="alternate"></link><published>2018-02-03T21:41:00+06:00</published><updated>2018-02-03T21:41:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2018-02-03:what-Heroku-should-do.html</id><summary type="html">&lt;p&gt;&lt;em&gt;DISCLAIMER: THESE OPINIONS ARE MY OWN AND DO NOT REFLECT THE OPINIONS OF MY FORMER OR PRESENT EMPLOYERS&lt;/em&gt;&lt;/p&gt;
&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#heroku-connect" id="id1"&gt;Heroku Connect&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#heterogeneous-syncing-types" id="id2"&gt;Heterogeneous Syncing Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pay-per-row" id="id3"&gt;Pay per Row&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#underpowered-dynos" id="id4"&gt;Underpowered Dynos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#deploy-anywhere-but" id="id5"&gt;Deploy Anywhere (but...)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#heroku-is-an-ecosystem" id="id6"&gt;Heroku is an Ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#what-heroku-is-doing-right" id="id7"&gt;What Heroku is Doing Right&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;I've been using Heroku for a while not at my workplace and so have many of our developers. Heroku is actually a really
good idea, and thats why services like convox.io and platform.sh keep popping up. The notion, that you can have
your servers managed by people, and not need a full time devops team is a total godsend. Iterations are faster and
easier, and it allows our teams to focus on application logic. It is not without its set of caveats though.
The market place also makes for quick integrations with other service providers, which makes adding things like cache
and search very easy.&lt;/p&gt;
&lt;p&gt;I myself was pretty skeptical at the beginning because although for my personal projects, my perception of Heroku
was that it was pretty expensive, and not something that you'd want to use at a &lt;em&gt;real&lt;/em&gt; company. By the time I joined,
Heroku was already being used for several applications. I mean, at the time, I just thought it was a nice skin on top
of AWS (which is an accurate description even to present day).&lt;/p&gt;
&lt;p&gt;However, the real reason that the company was using Heroku was because of a product called &lt;em&gt;Heroku Connect&lt;/em&gt; (HC).&lt;/p&gt;
&lt;div class="section" id="heroku-connect"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Heroku Connect&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Heroku Connect is basically a syncing tool. It basically syncs data from SalesForce (SF) to a Heroku operated Postgresql
database. The data in SalesForce (SF) was coming from the company's own servers. In other words, we were paying Heroku
to gain access to out own data. This initially perplexed me, but I soon found out is that the old platform had issues
scaling data access out, so we decided to use HC and Postgresql as a temporary solution to create a couple of
applications that we could use to test new products and new markets. SF does have an API, but that has API limits
for reads and writes, and is generally used for bulk updates and reads. Furthermore, it gets quite slow if you're
building an API on top of it. However, we soon ran into a couple of issues very quickly. HC in conjunction with
Postgresql was seen as a really good alternative, because it allowed you to bypass data access limit by essentially
creating a copy of your business data in Postgresql.&lt;/p&gt;
&lt;p&gt;However, we soon ran into a couple of issues really quickly.&lt;/p&gt;
&lt;div class="section" id="heterogeneous-syncing-types"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id2"&gt;Heterogeneous Syncing Types&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In SF, data is stored within things called SalesForce Objects (SO). These SOs are basically tables, and through HC are
mapped to Postgresql tables. There are two ways in which syncs occur. One is that there is a set interval after which
the data from SF is synced to Postgresql and the changes with Postgresql are synced to SalesForce. The other way is that
data is synced in real time. What is perplexing is that you never know which SOs are eligible for real time updates
and which ones will only be updated at intervals. You can always see which objects are being updated at intervals,
and which ones are being updated in real time, but you never know &lt;em&gt;why&lt;/em&gt; a particular SO gets real time updates while
another SO gets updates at intervals. Sometimes, SOs that had real time updates will start getting interval updates
instead. This is because you might hit what is called the &amp;quot;Streaming API limit&amp;quot;. What this limit is, and how it is
reached remains a mystery to me as well as our SF developers.&lt;/p&gt;
&lt;p&gt;If you're building a service that gives you quick and unlimited access to SF, then you better deliver on that promise
otherwise, people will become disillusioned by your service as a whole and so despite have some awesome product,
your reputation is going to suffer as a natural consequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pay-per-row"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id3"&gt;Pay per Row&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you want to use HC, you have to pay an amount for a particular number of rows. So basically, you are paying for
the data in SF, you are paying for the data in Postgresql, and on top of that you have to pay per row to use HC. This
is maddening because it makes so little sense. If you're building a syncing service, you should be charging for
throughput, and not for the amount of data. This also makes sense because the higher the throughput, the higher the
costs for Heroku as a business, so it'd make sense for both Heroku and the companies buying the HC service.&lt;/p&gt;
&lt;p&gt;But the real consequence of this pricing scheme is that if you want to launch a geo-distributed application built on
top of HC, you need to pay for rows in &lt;em&gt;each&lt;/em&gt; region because Heroku's postgres does not have multi-master replication,
only master-slave replication. So, if you had to pay for regions in the US, EU and China, then you'd need to pay
for the same number of rows &lt;em&gt;three&lt;/em&gt; times.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="underpowered-dynos"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Underpowered Dynos&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynos are basic units of computation for Heroku. In a generic sense, they are a virtual machine.&lt;/p&gt;
&lt;p&gt;The lowest tier dyno is really quite pathetic. Its just 512 MBs of RAM and 1 GHz, and for the equivalent price,
you could get a &lt;em&gt;few&lt;/em&gt; t2.mirco instances from AWS and I'm pretty sure that you could get the same from Azure and
Google Cloud Platform. Although you get auto-scaling as well as maintenance on those VMs, the price seems quite steep
for the kind of product that they're offering.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deploy-anywhere-but"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Deploy Anywhere (but...)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can &lt;em&gt;theoretically&lt;/em&gt; deploy on pretty much any continent using Heroku. However, there are two Herokus. There is the
public cloud, and then there is the private cloud. If this is news to you, then what you've been using all this time
is Heroku's public cloud. The public cloud only has a few regions, whereas the private cloud has many regions from
Virginia to Tokyo.&lt;/p&gt;
&lt;p&gt;However, the two clouds have a completely different payment scheme. To just be able to &lt;em&gt;use&lt;/em&gt; the
private cloud you need to pay a certain amount every month, just for the privilege of being able to use it. You're
not getting any dynos or anything. Just to be able to use the private cloud, you need to pay an amount upfront, and its
not cheap either. Furthermore, the dynos in the private cloud are more expensive (yes, they have a little more
compute power), which makes geo-distribution of your applications quite expensive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="heroku-is-an-ecosystem"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Heroku is an Ecosystem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In Heroku the &lt;em&gt;app&lt;/em&gt; is the center of the universe. You &lt;em&gt;attach&lt;/em&gt; add-ons like redis or Postgresql to your application.
You can indeed &lt;em&gt;share&lt;/em&gt; add-ons between applications, but later on, it becomes difficult to monitor what add-on is owned
by what app. It is far better if you have an interface, where you have the add-ons separate to the applications, so
that you can share resources between applications more easily.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-heroku-is-doing-right"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;What Heroku is Doing Right&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Heroku has probably the best service you can get. If something breaks or something goes wrong with your application,
their support mechanism is truly exceptional, because they will ping up an on-call engineer to fix your production
problems. Usually, these issues are resolved very quickly.&lt;/p&gt;
&lt;p&gt;Secondly, even if you consider that Heroku is expensive, having your own devops team is even more expensive, and
further still if you need them to be on-call. This is difficult for small companies.&lt;/p&gt;
&lt;p&gt;Furthermore, Heroku also has some of the best account executives you can get. They are really quite helpful,
and truly fight for you with upper management to give you the best deals possible if you buy bulk plans. I've only
worked with two so far, but they really are fighting for you in the company, and what to see you succeed.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Heroku"></category><category term="web"></category><category term="saas"></category></entry><entry><title>GraphQL in the Python World</title><link href="http://nafiulis.me/graphql-in-the-python-world.html" rel="alternate"></link><published>2017-06-23T16:53:00+06:00</published><updated>2017-06-23T16:53:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2017-06-23:graphql-in-the-python-world.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#getting-started" id="id2"&gt;Getting Started&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#here-comes-python" id="id3"&gt;Here Comes Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#playing-with-graphene" id="id4"&gt;Playing with Graphene&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#basic-types" id="id5"&gt;Basic Types&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#a-few-opinions" id="id6"&gt;A Few Opinions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#integration-with-orms" id="id7"&gt;Integration with ORMs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#django" id="id8"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#sqlalchemy-and-others" id="id9"&gt;SQLAlchemy and Others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#integration-with-web-frameworks" id="id10"&gt;Integration with Web Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#final-thoughts" id="id11"&gt;Final Thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Not too long ago, Facebook unveiled
&lt;a class="reference external" href="https://code.facebook.com/posts/1691455094417024/graphql-a-data-query-language/"&gt;Graphql&lt;/a&gt;.
This was thought up to be a flexible data access layer designed to work
as a simple interface on top of heterogeneous data sources. Not long after facebook had introduced it, github announced
that the latest version of its API (version 4) would indeed be a &lt;a class="reference external" href="https://developer.github.com/v4/"&gt;GraphQL API&lt;/a&gt;.
Many other companies have followed including Meteor, Pinterest, Shopify to name a few.&lt;/p&gt;
&lt;p&gt;At its heart, Graphql is designed to replace REST APIs. It also has a proper specification so that developers aren't
constantly fighting over the &lt;em&gt;proper&lt;/em&gt; definition of Graphql. It has documentation inbuilt, with its powerful graphiql
query application that allows people to quickly check out the results of a particular query, and get code completion
on the fly, as they are writing the query.&lt;/p&gt;
&lt;img alt="Graphql on Github" class="align-center" src="/images/graphql_01.png" /&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Getting Started&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python's main competitor in the ring is a nifty little library called &lt;a class="reference external" href="http://graphene-python.org/"&gt;graphene&lt;/a&gt;.
But before we get into graphene, we need to talk about some of the fundamental parts of Graphql.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;em&gt;model&lt;/em&gt; is an object defined by a Graphql schema.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;schema&lt;/em&gt; defines models and their attribute.&lt;/li&gt;
&lt;li&gt;Each attribute of a model has its own &lt;em&gt;resolver&lt;/em&gt;.
This is a function that is responsible for getting
the data for that particular model attribute.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;query&lt;/em&gt; is basically what you use to get or set
data inside Graphql&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Mutations&lt;/em&gt; are particular queries that allow you
to change the data for a given model or a set
of models.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Graphiql&lt;/em&gt; is the UI that you use to interact with
a Graphql server. The IDE-like thing that you see
in the above screenshot is the Graphiql interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="here-comes-python"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id3"&gt;Here Comes Python&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Python's attempt at Graphql can be broken down into three parts. Graphene, ORM specific graphene add-ons and
graphene libraries that add support to web frameworks such as flask or django. Graphene allows you to define your
models, define the attributes in your model, and also parses queries to get the data for those particular models.&lt;/p&gt;
&lt;p&gt;The ORM specific graphene libraries basically do the job of turning your SQLAlchemy or Django models
into Graphql objects with the help of graphene. Some libraries will will also come in with views that fit in with
your web framework like &lt;code&gt;graphene-django&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="playing-with-graphene"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;Playing with Graphene&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Installation is quite easy, and graphene supports both python versions 2 and 3.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install graphene
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you've installed it, import it, write a simple model, and the execute it like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;graphene&lt;/span&gt;  &lt;span class="c1"&gt;# 1&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;graphene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# 2&lt;/span&gt;

    &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;graphene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A typical hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resolve_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# 4&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;World&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;graphene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 5&lt;/span&gt;

&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;    query {&lt;/span&gt;
&lt;span class="s1"&gt;      hello&lt;/span&gt;
&lt;span class="s1"&gt;    }&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# 6&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;1&lt;/code&gt; we are importing the package. Note that in &lt;code class="coderef"&gt;2&lt;/code&gt; we are creating the query class. All query classes inherit
from the &lt;code&gt;graphene.ObjectType&lt;/code&gt; class. You can also embed queries within queries (this is great when you want
to modularize your applications). Furthermore, even complex objects will also inherit from &lt;code&gt;graphene.ObjectType&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This class basically
holds all the models. Right now, there is only one model, and that is hello, which happens to be a simple string. Yes,
I know its not terribly exciting, but bare with me.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;3&lt;/code&gt; we add an object to the schema. In this case it is a simple string. In &lt;code class="coderef"&gt;4&lt;/code&gt; we basically write the &lt;em&gt;resolver&lt;/em&gt;
for that particular model in the schema, we will get into the details of the function signature soon enough.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;5&lt;/code&gt; we basically declare the schema, and we tell it that the query
class object is &lt;code&gt;Query&lt;/code&gt; (a query object can be made up of multiple query objects, and we will get into that later).&lt;/p&gt;
&lt;p&gt;Then, we declare the simplest query possible, in &lt;code class="coderef"&gt;6&lt;/code&gt; and in &lt;code class="coderef"&gt;7&lt;/code&gt; we finally execute it. This is what the result looks
like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;graphql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExecutionResult&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result comes with three main attributes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invalid&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; gives us the return data that we want. &lt;code&gt;errors&lt;/code&gt; points any errors that we might &lt;a class="footnote-reference" href="#errors" id="id1"&gt;[1]&lt;/a&gt;
have and finally, &lt;code&gt;invalid&lt;/code&gt; basically tells us that if the query itself is valid.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="basic-types"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Basic Types&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, now that we've gotten the hang of the fundamental parts of the Graphql system, its time that we explored the other
data types, and started playing around with more complex objects. There is already plenty of good documentation on
this stuff, so I won't do a copy of the tutorials that are already available. The first thing to take a look at is
the &lt;a class="reference external" href="http://docs.graphene-python.org/en/latest/types/"&gt;type reference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are quite a few types to go over, but in basic terms, there is a dichotomy between scalars and non-scalars.
Scalars are the base object types, they are things like strings, integers, booleans etc. Non-Scalars on the other
hand are more complex objects, often they are containers of scalars, like lists, &lt;code&gt;graphene.List&lt;/code&gt;. They can also
be interfaces, that other graphene &lt;code&gt;ObjectType&lt;/code&gt;s inherit from and of course, there are mutation types, that
basically make changes on top of the data.&lt;/p&gt;
&lt;p&gt;In simple terms, there are a lot of types, but what it comes down to are basically types that hold information,
types that contain basic scalar types, types that other types inherit from in a concrete sense and types that
other objects inherit from in an abstract sense. Pretty much what you'd expect from a simple object oriented system.&lt;/p&gt;
&lt;div class="section" id="a-few-opinions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;A Few Opinions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;However, what I have come to notice is that it is almost always better to avoid using abstract types, and just go
straight for interfaces. Most of the time, you just don't need abstract objects. In the case of Graphql, composition
is almost always better than inheritance. Probably the only place that it makes sense to use the &lt;code&gt;AbstractType&lt;/code&gt;
class is for &lt;code&gt;Query&lt;/code&gt; types that you are later on going to use in your final &lt;code&gt;Query&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;Make sure to keep your names simple, and avoid using &lt;code&gt;graphene.NotNull&lt;/code&gt;, because you can always set
&lt;code&gt;required=True&lt;/code&gt; for scalar types anyway. This is similar to what you get in other serializer libraries, so
people looking at the codebase can see commonalities between graphene and other libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-with-orms"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Integration with ORMs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you think about it, at its core, graphene is basically a combination of a serialization library and a Graphql
query interpreter, so it would make a lot of sense for it to work with ORMs and it does so quite well. At the time
of writing this, there is support for django, sqlalchemy as well as google app engine. Most are really quite
simple to integrate. Most of the time, you just have to set the meta model attribute of an object type and you're done.&lt;/p&gt;
&lt;div class="section" id="django"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Django&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;graphene_django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DjangoObjectType&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;birth_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;personbirthdate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;created_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;createddate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;is_paying_customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NullBooleanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iscustomer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;country&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;customer_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;db_column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cnumber&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;editable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;managed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="n"&gt;db_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;accountinfo&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AccountType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DjangoObjectType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can now use &lt;code&gt;AccountType&lt;/code&gt; just like you would any other object type. But most of the time, you don't even
have to manually add things to the query objects. If you have django-filter installed, you can do something pretty
simple, and add &lt;code&gt;graphene.Node&lt;/code&gt; to your list of interfaces for a give type. This allows you to set some variables
in the metaclass that allows for simple filtering and also allows your type to be easily integrated into the query
using &lt;code&gt;DjangoConnectedFilterField&lt;/code&gt;. Here's an example of what that would look like from the perspective of the
&lt;code&gt;Account&lt;/code&gt; model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AccountNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DjangoObjectType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;
        &lt;span class="n"&gt;interfaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;graphene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;filter_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;customer_number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;is_paying_customer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this is what it would look like in the query object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;graphene_django.filter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DjangoConnectedFilterField&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AccountQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;graphene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="c1"&gt;# Gives you a particular account&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;graphene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AccountNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Gives you all the accounts available&lt;/span&gt;
&lt;span class="n"&gt;all_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DjangoFilterConnectionField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AccountNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-customer_number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This really simplifies your whole query process, and focuses on fat database models and not fat graphene objects. Note,
that I use &lt;code&gt;graphene.AbstractType&lt;/code&gt; for this &lt;code&gt;AccountQuery&lt;/code&gt; objects because I'm basically going to use
it as a mixin for my final &lt;code&gt;Query&lt;/code&gt; Object. Here is what that looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.queries&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AccountQuery&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AccountQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;graphene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;graphene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way, your main query object won't be cluttered, and you can keep adding your queries as you please. Make sure to
add &lt;code&gt;graphene.ObjectType&lt;/code&gt; as the &lt;em&gt;last&lt;/em&gt; argument for inheritance, otherwise your final &lt;code&gt;Query&lt;/code&gt; object
will not be a concrete class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sqlalchemy-and-others"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;SQLAlchemy and Others&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Other ORMs are also similarly supported. With SQLAlchemy, you just use &lt;code&gt;SQLAlchemyObjectType&lt;/code&gt; instead of
&lt;code&gt;DjangoObjectType&lt;/code&gt;, you can also add the &lt;code&gt;Node&lt;/code&gt; interface to it, and have a similar querying experience
that you do with django using &lt;code&gt;SQLAlchemyConnectionField&lt;/code&gt;. The same is true for google app engine. Peewee support
is still in the works.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-with-web-frameworks"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Integration with Web Frameworks&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As you might expect, graphene supports a few popular frameworks, with more support coming. Right now there is awesome
support for &lt;code&gt;flask&lt;/code&gt; and &lt;code&gt;django&lt;/code&gt;. Here is what a flask Graphql application looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_graphql&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GraphQLView&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db_session&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;schema&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_url_rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;/graphql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;view_func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;GraphQLView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;graphql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;graphiql&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.teardown_appcontext&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;shutdown_session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;db_session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I would of course suggest that you have separate endpoints for graphiql and for your HTTP requests. You can also
subclass &lt;code&gt;GraphQLView&lt;/code&gt; if you want to add some custom authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="final-thoughts"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Final Thoughts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I really like Graphql, I've recently launched a production application based on top of Graphql, and
&lt;code&gt;graphene-django&lt;/code&gt; has really helped me replace my current REST API with a Graphql API (or service or whatever
it is that you want to call it). The delcarative syntax makes it quite easy to use, and so there really is not much
of a learning curve, especially if you've used serializer libraries like Marshmallow or DRF's serializers.&lt;/p&gt;
&lt;p&gt;Currently, graphene is basically a python port of the Graphql nodejs package at version 0.6. I'm pretty sure there will
be version bumps in the future as the library has a healthy following. It also supports all kinds of clients including
the apollo client.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="errors" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;You will always get back errors in a separate sub-object in a query if you have any. You will not get any errors in HTTP status codes.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="graphql"></category><category term="REST"></category><category term="API"></category><category term="web"></category></entry><entry><title>Only Real-Time will Remain Standing</title><link href="http://nafiulis.me/only-real-time-will-remain-standing.html" rel="alternate"></link><published>2015-11-21T12:14:00+06:00</published><updated>2015-11-21T12:14:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2015-11-21:only-real-time-will-remain-standing.html</id><summary type="html">&lt;p&gt;The Internet has changed tremendously over the past few years. What started
off as a platform to share research has become &lt;em&gt;the&lt;/em&gt; hub of communication,
commerce and entertainment. However, we are at the verge of
the next stage in the evolution of web applications: the normalization
of real-time applications.&lt;/p&gt;
&lt;p&gt;This transition will not only see real-time web applications become ubiquitous
but rather, and more fundamentally, become the de-facto standard for a web
application. This eventual change is a result of a myriad of things, but mostly
as a result of increased computing power, faster and cheaper storage as well
as javascript becoming ridiculously more powerful.&lt;/p&gt;
&lt;p&gt;There have been dramatic changes in technology in order for change to happen.
With the advent of SSDs and multi-core processors as well
as architectural shift towards distributed systems, we suddenly have a lot
more processing power at our disposal. These changes did not
happen solely because we &lt;em&gt;wanted&lt;/em&gt; to build real-time applications but rather,
they arose out of a need to scale our sites to monolithic proportions.&lt;/p&gt;
&lt;p&gt;As such, consequences will be dire for languages, frameworks and implementations
that do not have first-class support for creating asynchronous or concurrent
applications. Many will claim that non-real time web applications will
survuive, but they will survuive the way that static html pages (with little
to no styling) do. In other words, they will become artifacts of a bygone
era.&lt;/p&gt;
&lt;p&gt;The underlying technology has become powerful enough to support this, but
the rise of modern javascript libraries such as react, angular and others
will only catalyze the eventual rise and dominance of such applications.
RESTful web services are merely a precursor to full blown sites running
mostly using websockets. In other words, we are in for a lot more single page
applications.&lt;/p&gt;
&lt;p&gt;Language-wise, golang and scala will become much more popular
than they already are.&lt;a class="footnote-reference" href="#javascript" id="id1"&gt;[1]&lt;/a&gt;
Languages like Python and Ruby will no longer remain
in the positions they currently hold until and unless they get their acts
together to support this new paradigm or find another use case
entirely.&lt;a class="footnote-reference" href="#python" id="id2"&gt;[2]&lt;/a&gt; Although both Python and Ruby have
their asynchronous frameworks and/or libraries, they are not powerful enough
to face off against go, scala and nodejs as they do not have an implementation
fast enough to compete with the likes of go, which has concurrency primitives
and Scala which has many libraries for paralell code execution.&lt;/p&gt;
&lt;p&gt;But languages alone will not face the consequences of this change;
databases will need to evolve as well. One example of a
database built solely for real-time applications is rethinkdb,
which already has many adherents. Rethinkdb started off as a MySQL engine,
but has evolved to become an independent database in and of itself, touting
features like atomic changfeeds in its latest release.&lt;/p&gt;
&lt;p&gt;So, when trying to master language, framework or database, make sure
to take into consideration the eventual rise of real-time applications and
do your best to avoid languages, frameworks and databases that do not support
this new paradigm. Otherwise, the skills that you're building might eventually
have very little value in the near future.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="javascript" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If you're asking why javascript isn't on that list, that's
because its not possible for javascript to get more popular than it
already is.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="python" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Python has already found a good niche in the realm of education
and data-science, so I feel that it will still remain quite relevant or
even as popular as it is now in the years ahead simply because data is
blowing up in everyone's face.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="essay"></category><category term="real-time"></category><category term="programming-languages"></category><category term="databases"></category></entry><entry><title>Setting up Rethinkdb with Lunchy</title><link href="http://nafiulis.me/setting-up-rethinkdb-with-lunchy.html" rel="alternate"></link><published>2015-09-27T14:35:00+06:00</published><updated>2015-09-27T14:35:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2015-09-27:setting-up-rethinkdb-with-lunchy.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#installation" id="id6"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#setup" id="id7"&gt;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#launching" id="id8"&gt;Launching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Rethinkdb is a powerful new NoSQL database that comes with its one web-based admin console. However, its a bit
awkward to set up. The installation is not hard when you have a one line homebrew installation or if you prefer to
install it as an application, then you can simply use the use their disk image provided as a url &lt;a class="reference external" href="https://www.rethinkdb.com/docs/install/osx/"&gt;download&lt;/a&gt; on their OSX installation page. However, the Rethinkdb
command line tool is a bit awkward in the sense that it just creates a directory to store your data in the same
directory that you launch it. This is a simple tutorial on how to set rethinkdb as a service so that it stores your
data in the same place with a proper set of default configurations.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Installation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I would highly recommend using homebrew to install rethinkdb. Its a painless process and gives you full control as to
how you use the &lt;code&gt;rethinkdb&lt;/code&gt; CLI.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install rethinkdb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we are going to install &lt;code&gt;lunchy&lt;/code&gt;, which is a wrapper over &lt;code&gt;launchctl&lt;/code&gt;, that basically starts and stops
our services in a simple manner.&lt;a class="footnote-reference" href="#lunchy" id="id1"&gt;[1]&lt;/a&gt; &lt;a class="footnote-reference" href="#agentsanddemons" id="id2"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem install lunchy
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="setup"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Setup&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first thing that we need to do is install the &lt;code&gt;rethinkdb&lt;/code&gt; plist file in our LaunchAgents directory. We can
do this by firstly creating a file called &lt;code&gt;com.rethinkdb.server.plist&lt;/code&gt; and then running &lt;code&gt;lunchy install&lt;/code&gt; on
that file. My own configuration is shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple Computer//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;plist&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Label&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.rethinkdb.server&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ProgramArguments&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/usr/local/bin/rethinkdb&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;-d&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/Users/quazinafiulislam/Library/RethinkDB/data&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;StandardOutPath&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/Users/quazinafiulislam/Library/Rethinkdb/out.log&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;StandardErrorPath&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/Users/quazinafiulislam/Library/Rethinkdb/error.log&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RunAtLoad&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;false/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;KeepAlive&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;LowPriorityIO&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;false/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="steps"&gt;
&lt;h3&gt;Steps&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create a file using the &lt;code&gt;touch&lt;/code&gt; command, i.e. &lt;code&gt;touch com.rethinkdb.server.plist&lt;/code&gt;, and just paste in
the contents.&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;quazinafiulislam&lt;/code&gt; with your username in the file.&lt;a class="footnote-reference" href="#completepaths" id="id3"&gt;[3]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a new directory, &lt;code&gt;~/Library/Rethinkdb&lt;/code&gt;. This place will house all your rethinkdb stuff i.e. data, logs etc.&lt;/li&gt;
&lt;li&gt;Create a new data directory using &lt;code&gt;rethinkdb create -d ~/Library/Rethinkdb/data&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The install the file into your LaunchAgents directory using &lt;code&gt;lunchy install com.rethinkdb.server.plist&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Once this is done, create two log files using the &lt;code&gt;touch&lt;/code&gt; command to create the output log and the error log
inside &lt;code&gt;~/Library/LaunchAgents&lt;/code&gt; named &lt;code&gt;out.log&lt;/code&gt; and &lt;code&gt;error.log&lt;/code&gt; respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the express installation, you can of course customize the installation to your needs. For example you can add
your own &lt;code&gt;.conf&lt;/code&gt; file for rethinkdb.&lt;a class="footnote-reference" href="#configure" id="id4"&gt;[4]&lt;/a&gt; You can then add it as a parameter to your program arguments
by adding the following to your &lt;code&gt;ProgramArguments&lt;/code&gt; inside of &lt;code&gt;array&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;--config-file&lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/path/to/your/config/file&lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Feel free to change the &lt;code&gt;plist&lt;/code&gt; file to your liking. One other thing that you might want to change is the
&lt;code&gt;RunAtLoad&lt;/code&gt; key. I've set this to &lt;code&gt;false&lt;/code&gt;, but you might want &lt;code&gt;rethinkdb&lt;/code&gt; to start up when you log
into your system.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="launching"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Launching&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Launching this is quite easy, all you need to do is tell &lt;code&gt;lunchy&lt;/code&gt; that you want to start the &lt;code&gt;rethinkdb&lt;/code&gt;
service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lunchy start rethinkdb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that the standard output is printed to the &lt;code&gt;out.log&lt;/code&gt; file inside of &lt;code&gt;~/Library/Rethinkdb&lt;/code&gt;.&lt;a class="footnote-reference" href="#port" id="id5"&gt;[5]&lt;/a&gt;&lt;/p&gt;
&lt;img alt="Rethinkdb log" class="align-center" src="/images/rethink_01.png" /&gt;
&lt;p&gt;Stopping &lt;code&gt;rethinkdb&lt;/code&gt; is also a breeze.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lunchy stop rethinkdb
&lt;/pre&gt;&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="lunchy" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Launchd"&gt;Wikipedia Page&lt;/a&gt; will give you a good idea of what both
&lt;code&gt;launchd&lt;/code&gt; and &lt;code&gt;launchctrl&lt;/code&gt; are.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="agentsanddemons" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If you want to know the difference between a launch agent and a demon,
take a look at &lt;a class="reference external" href="http://www.grivet-tools.com/blog/2014/launchdaemons-vs-launchagents/"&gt;this article&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="completepaths" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Make sure that when you enter the path of a file or folder in a &lt;code&gt;.plist&lt;/code&gt; file, you give the complete
path without aliases.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="configure" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Learn to configure rethinkdb from their &lt;a class="reference external" href="https://www.rethinkdb.com/docs/config-file/"&gt;configuration documentation page&lt;/a&gt;.
I would strongly encourage you to create your own &lt;code&gt;.conf&lt;/code&gt; file.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="port" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;You can specify your port as another &lt;code&gt;ProgramArgument&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Rethinkdb"></category><category term="databases"></category><category term="nosql"></category><category term="lunchy"></category></entry><entry><title>Python 3 May Become Relevant Now</title><link href="http://nafiulis.me/python-3-may-become-relevant-now.html" rel="alternate"></link><published>2015-08-03T03:30:00+06:00</published><updated>2015-08-03T03:30:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2015-08-03:python-3-may-become-relevant-now.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#type-hints" id="id6"&gt;Type Hints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#async-await" id="id7"&gt;Async/Await&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#summary" id="id8"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Python 3 has been mocked for a pretty long time for not having any &lt;em&gt;big-ticket&lt;/em&gt; features. For the first four
minor releases for Python 3 (3.1 to 3.4), this did not change. There are two features that are worth noting
in Python 3.5. One being the type checker/hints.&lt;a class="footnote-reference" href="#typechecker" id="id1"&gt;[1]&lt;/a&gt; The other being the async/await key words
coming to Python 3.5.&lt;a class="footnote-reference" href="#async" id="id2"&gt;[2]&lt;/a&gt; Question is, how relevant?&lt;/p&gt;
&lt;div class="section" id="type-hints"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Type Hints&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This PEP aims to provide a standard syntax for type annotations, opening up Python code to easier static analysis
and refactoring, potential runtime type checking, and performance optimizations utilizing type information.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;PEP 0484&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python now has a type &lt;em&gt;checker&lt;/em&gt;. This does not mean that python is going to magically become a
&lt;em&gt;statically typed&lt;/em&gt; language. In other words, the type checker is merely a tool for a better development experience.
For example, if your IDE/Editor knows what type you're working with, it can provide better code completion. Some
IDEs actually provide rudimentary type checking.&lt;a class="footnote-reference" href="#pycharm" id="id3"&gt;[3]&lt;/a&gt; However, this will standardize the way in which
types are declared and that means this will raise the bar for all the python tools available at our disposal.&lt;/p&gt;
&lt;p&gt;Think of this as the python equivalent to &lt;a class="reference external" href="https://github.com/facebook/flow"&gt;flow&lt;/a&gt;, which is a static type checker
for javascript. The type checking will happen through stub files, a lot like DefinitelyTyped's Typescript stubs.&lt;a class="footnote-reference" href="#dt" id="id4"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Other than better tooling, this also means that a type induced runtime errors can be thwarted before they happen, which is
something that makes developing large code bases with Python a lot easier. You will hear no end of war stories about
how a function that &lt;em&gt;sometimes&lt;/em&gt; returned &lt;code&gt;None&lt;/code&gt; deep in the source brought about &lt;em&gt;pyapocalypse&lt;/em&gt;. Having type
problems deep within your source code, is by no means uncommon.&lt;/p&gt;
&lt;p&gt;A friend of mine had to deal with this kind of problem once. The problem was with a function (buried deep in the
source code as one of many decorators) that usually returned a &lt;code&gt;list&lt;/code&gt; but under a certain circumstances, it
returned &lt;code&gt;None&lt;/code&gt;. This wasn't noted before because most of the time, the result would be checked in a
simple &lt;code&gt;if&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;In other words &lt;code&gt;bool(None)&lt;/code&gt; and &lt;code&gt;bool([])&lt;/code&gt; return the same thing, which is &lt;code&gt;False&lt;/code&gt;. The problem was
happening because &lt;em&gt;another&lt;/em&gt; branch still &lt;em&gt;thought&lt;/em&gt; that the returned value was a &lt;code&gt;list&lt;/code&gt; and so
tried to &lt;code&gt;append&lt;/code&gt; to it. As you might expect, the traceback wasn't pretty.&lt;/p&gt;
&lt;p&gt;I'm not saying that the person who originally wrote the code is a bad programmer. I'll leave that up to you. What
I am saying is that python allows you to make such silly mistakes. This is especially problematic when you're working
with really large code-bases.&lt;/p&gt;
&lt;p&gt;However, while this is all good in terms of development tools, this does not mean a large boost in performance. PyPy's
FAQ talks about this issue and addresses some of the key concerns. &lt;a class="footnote-reference" href="#pypyfaq" id="id5"&gt;[5]&lt;/a&gt; In a nutshell, the performance will
not increase simply because python's types are objects and do not correspond directly to how types are represented in
binary. For example, python's &lt;code&gt;int&lt;/code&gt; type isn't necessarily a 64-bit number, but has the ability to grow to whatever
size you need it to grow.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... annotations are at the wrong level (e.g. a PEP 484 “int” corresponds to Python 3’s int type, which does not
necessarily fits inside one machine word; even worse, an “int” annotation allows arbitrary int subclasses).&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;PyPy FAQ (Would type annotations help PyPy’s performance?)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="async-await"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Async/Await&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This proposal makes coroutines a native Python language feature, and clearly separates them from generators. This
removes generator/coroutine ambiguity, and makes it possible to reliably define coroutines without reliance on a
specific library. This also enables linters and IDEs to improve static code analysis and refactoring.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;PEP 0492&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; are very good ideas. In fact, these two keywords have been an integral part of C# for
quite some time now and make programing with tasks much easier. These two key words makes python feel a lot more
abstract, whereas turning generators into coroutines (even through the use of a decorator) and then using them like
generators feels rather clumsy. In simple terms, &lt;code&gt;async&lt;/code&gt; creates a coroutine for you. For example, the following
is a coroutine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="nd"&gt;@asyncio.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;end_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;end_time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Blocking call which returns when the display_date() coroutine is done&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above will turn into the following under PEP-492:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;end_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;end_time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Blocking call which returns when the display_date() coroutine is done&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, what is being introduced is syntactic sugar meaning that this does not change python on a fundamental level.
For example, introducing these native constructs will not &lt;em&gt;magically&lt;/em&gt; make python be able to compete with node (V8).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Summary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The new features being added are subtle but will go a long way into making Python 3 the abstract language that it needs
to be as well as provide the tooling required to make it a potential choice for huge code-bases. However, this does
not mean that Python has become a better choice over other languages such as golang for high performance applications.
So, although these new features will definitely persuade people to move from Python 2 to Python 3 (at least for new
projects), it does not necessarily mean that more and more people will leave Python seeking abstract yet high
performance alternatives.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="typechecker" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP-0484&lt;/a&gt;. This type checker is
based on the &lt;a class="reference external" href="http://mypy-lang.org/"&gt;mypy&lt;/a&gt; type checker created by one of the authors of PEP-0484,
Jukka Lehtosalo.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="async" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0492/"&gt;PEP-0492&lt;/a&gt;. This is a pretty radical change since it means
Python will get new key words.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="pycharm" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;PyCharm provides type checking through its &lt;a class="reference external" href="https://github.com/JetBrains/python-skeletons"&gt;skeletons&lt;/a&gt;.
These are a lot like the stubs that PEP-0484 is proposing.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="dt" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;DefinitelyTyped is a collection for stub files for a language called TypeScript which is basically a typed
superset of JavaScript. These stub files help IDE and editors in providing better code completion.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="pypyfaq" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;PyPy's FAQ talks about this issue, and its lack of effect on performance under
&amp;quot;&lt;a class="reference external" href="http://pypy.readthedocs.org/en/latest/faq.html#would-type-annotations-help-pypy-s-performance"&gt;Would type annotations help PyPy’s performance?&lt;/a&gt;&amp;quot;.
Look under the &amp;quot;PEP-484 Type Hints&amp;quot; sub section.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="async-await"></category><category term="python3"></category><category term="type-hints"></category><category term="pep"></category><category term="pep-484"></category><category term="pep-492"></category></entry><entry><title>Potential Pythonic Pitfalls</title><link href="http://nafiulis.me/potential-pythonic-pitfalls.html" rel="alternate"></link><published>2015-05-11T15:42:00+06:00</published><updated>2015-05-11T15:42:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2015-05-11:potential-pythonic-pitfalls.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#not-knowing-the-python-version" id="id7"&gt;Not Knowing the Python Version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#obsessing-over-one-liners" id="id8"&gt;Obsessing Over One-Liners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#initializing-a-set-the-wrong-way" id="id9"&gt;Initializing a set the Wrong Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#misunderstanding-the-gil" id="id10"&gt;Misunderstanding the GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#using-old-style-classes" id="id11"&gt;Using Old Style Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#iterating-the-wrong-way" id="id12"&gt;Iterating the Wrong Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#using-mutable-default-arguments" id="id13"&gt;Using Mutable Default Arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#takeaway" id="id14"&gt;Takeaway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#update" id="id15"&gt;Update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Python is a very expressive language. It provides us with a large standard library and many builtins to get the job
done quickly. However, many can get lost in the power that it provides, fail to make full use of the standard
library, value one liners over clarity and misunderstand its basic constructs. This is a non-exhaustive list of a
few of the pitfalls programmers new to Python fall into.&lt;/p&gt;
&lt;div class="section" id="not-knowing-the-python-version"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Not Knowing the Python Version&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a recurring problem in StackOverflow questions. Many write perfectly working code for one version but they have
a &lt;em&gt;different&lt;/em&gt; version of Python installed on their system.&lt;a class="footnote-reference" href="#pythree" id="id1"&gt;[1]&lt;/a&gt;
Make sure that you know the Python version you're working with. You can check via the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python --version
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.9
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="not-using-a-version-manager"&gt;
&lt;h3&gt;Not Using a Version Manager&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/yyuu/pyenv"&gt;pyenv&lt;/a&gt; is a great tool for managing different Python versions. Unfortunately, it only
works on *nix systems. On Mac OS, one can simply install it via &lt;code&gt;brew install pyenv&lt;/code&gt; and on Linux, there is
an &lt;a class="reference external" href="https://github.com/yyuu/pyenv-installer"&gt;automatic installer&lt;/a&gt;. &lt;a class="footnote-reference" href="#alternative" id="id2"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="obsessing-over-one-liners"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Obsessing Over One-Liners&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some get a &lt;em&gt;real kick&lt;/em&gt; out of one liners. Many boast about their one-liner solutions even if they are less efficient
than a multi-line solution.&lt;/p&gt;
&lt;p&gt;What this essentially means in Python is convoluted comprehensions having multiple expressions. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To be perfectly honest, I made the above example up. But, I've seen plenty of people write code like it. Code like
this will make no sense in a week's time. If you're trying to do something a little more complex that simply adding
an item to a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt; with a condition then you're probably making a mistake.&lt;/p&gt;
&lt;p&gt;One-Liners are not achievements, yes they can seem very clever but they are not achievements. Its like thinking that
shoving everything into your closet is an actual attempt at cleaning your room. Good code is clean, easy to read and
efficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="initializing-a-set-the-wrong-way"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Initializing a set the Wrong Way&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a more subtle problem that can catch you off guard. &lt;code&gt;set&lt;/code&gt; comprehensions are a lot like list
comprehensions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;set&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above is one such example of a set comprehension. Sets are like lists in that they are containers. The difference
is that a set cannot have any duplicate values and sets are unordered. Seeing set comprehensions people often make
the mistake of thinking that &lt;code&gt;{}&lt;/code&gt; initializes an &lt;em&gt;empty&lt;/em&gt; set. It does not, it initializes an empty &lt;em&gt;dict&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;dict&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we wish to initialize an empty set, then we simply call &lt;code&gt;set()&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;set&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note how an empty set is denoted as &lt;code&gt;set()&lt;/code&gt; but a set containing something is denoted as items surrounded by
curly braces.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is rather counter intuitive, since you'd expect something like &lt;code&gt;set([1, 2])&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="misunderstanding-the-gil"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Misunderstanding the GIL&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The GIL (Global Interpreter Lock) means that only one thread in a Python program can be running at any one time. This
implies that when we create a thread and expect to run in &lt;em&gt;parallel&lt;/em&gt; it doesn't. What the Python interpreter is
actually doing is quickly &lt;em&gt;switching&lt;/em&gt; between different running threads. But this is an oversimplified version of
what is actually happening. There are many instances in which things &lt;em&gt;do&lt;/em&gt; run in parallel, like when using libraries
that are essentially C extensions. But when running Python code, you don't get parallel execution &lt;em&gt;most&lt;/em&gt; of the time. In
other words, threads in Python are not like Threads in Java or C++.&lt;/p&gt;
&lt;p&gt;Many will try to defend Python by saying that these are &lt;em&gt;real&lt;/em&gt; threads.&lt;a class="footnote-reference" href="#realthreads" id="id3"&gt;[3]&lt;/a&gt;
This is indeed true, but does not change the fact that how Python handles threads is different from what you'd generally
expect. This is the same case for a language like Ruby (which also has an interpreter lock).&lt;/p&gt;
&lt;p&gt;The prescribed solution to this is using the &lt;code&gt;multiprocessing&lt;/code&gt; module. The &lt;code&gt;multiprocessing&lt;/code&gt; module provides
you with the &lt;code&gt;Process&lt;/code&gt; class which is basically a nice cover over a fork. However, a fork is much more expensive
than a thread, so you might not always see the performance benefits since now the different processes have to do a lot
of work to co-ordinate with each other.&lt;/p&gt;
&lt;p&gt;However, this problem does not exist every &lt;em&gt;implementation&lt;/em&gt; of Python.
&lt;a class="reference external" href="http://pypy.readthedocs.org/en/latest/stm.html"&gt;PyPy-stm&lt;/a&gt; for example is an implementation of Python that tries
to get rid of the GIL (still not stable yet). Implementations built on top of other platforms like the JVM (Jython)
or CLR (IronPython) do not have GIL problems.&lt;/p&gt;
&lt;p&gt;All in all, be careful when using the &lt;code&gt;Thread&lt;/code&gt; class, what you get might not be what you expect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-old-style-classes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Using Old Style Classes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In Python 2 there are two types of classes, there's the &amp;quot;old style&amp;quot; classes, and there's the &amp;quot;new style&amp;quot; classes. If
you're using Python 3, then you're using the &amp;quot;new style&amp;quot; classes by default. In order to make sure that you're using
&amp;quot;new style&amp;quot; classes in Python 2, you need to inherit from &lt;code&gt;object&lt;/code&gt; for &lt;em&gt;any&lt;/em&gt; new class you create that
isn't already inheriting from a builtin like &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;list&lt;/code&gt;. In other words, your base class, the class
that isn't inheriting from anything else, should always inherit from object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyNewObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# stuff here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These &amp;quot;new style&amp;quot; classes fix some very fundamental flaws in the old style classes that we really don't need to get
into. However, if anyone is interested they can find the information in the
&lt;a class="reference external" href="https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes"&gt;related documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="iterating-the-wrong-way"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Iterating the Wrong Way&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Its very common to see the following code from users who are relatively new to the language:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name_index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name_index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is no need to call &lt;code&gt;len&lt;/code&gt; in the above example, since iterating over the list is actually much simpler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Furthermore, there are a whole host of other tools at your disposal to make iteration easier. For example, &lt;code&gt;zip&lt;/code&gt;
can be used to iterate over two lists at once:&lt;a class="footnote-reference" href="#zip" id="id4"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dogs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want to take into consideration both the index &lt;em&gt;and&lt;/em&gt; the value list variable, we can use &lt;code&gt;enumerate&lt;/code&gt;:&lt;a class="footnote-reference" href="#enumerate" id="id5"&gt;[5]&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cats&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are also many useful functions to choose from in &lt;a class="reference external" href="https://docs.python.org/3/library/itertools.html"&gt;itertools&lt;/a&gt;.
Please note however, that using &lt;code&gt;itertools&lt;/code&gt; functions is not always the right choice. If one of the functions
in &lt;code&gt;itertools&lt;/code&gt; offers a very convenient solution to the problem you're trying to solve, like flattening a list or
creating a getting the permutations of the contents of a given list, then go for it. But &lt;em&gt;don't&lt;/em&gt; try to fit it into
some part of your code just because you want to.&lt;/p&gt;
&lt;p&gt;The problem with &lt;code&gt;itertools&lt;/code&gt; abuse happens so often that one highly respected Python contributor on StackOverflow
has dedicated a significant part of their profile to it.&lt;a class="footnote-reference" href="#abarnert" id="id6"&gt;[6]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-mutable-default-arguments"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Using Mutable Default Arguments&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I've seen the following quite a lot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="c1"&gt;# append to c&lt;/span&gt;
    &lt;span class="c1"&gt;# do some more stuff&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Never use mutable default arguments, instead use the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="c1"&gt;# append to c&lt;/span&gt;
    &lt;span class="c1"&gt;# do some more stuff&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of explaining what the problem is, its better to show the effects of using mutable default arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;The same &lt;code&gt;c&lt;/code&gt; is being referenced again and again every time the function is called. This can have some very&lt;/dt&gt;
&lt;dd&gt;unwanted consequences.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="takeaway"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Takeaway&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These are just some of the problems that one might run into when relatively new at Python. Please note however, that
this is far from a comprehensive list of the problems that one might run into. The other pitfalls however are largely
to do with people using Python like Java or C++ and trying to use Python in a way that they are familiar with. So,
as a continuation of this, try diving into things like Python's &lt;code&gt;super&lt;/code&gt; function. Take a look at
&lt;code&gt;classmethod&lt;/code&gt;, &lt;code&gt;staticmethod&lt;/code&gt; and &lt;code&gt;__slots__&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Update&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Last Updated on 12 May 2015 4:50 PM (GMT +6)&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Made the section on &lt;a class="reference internal" href="#misunderstanding-the-gil"&gt;Misunderstanding the GIL&lt;/a&gt; better.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="pythree" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Most people are taught Python using Python 2. However, when they go home and try things out
themselves, they install Python 3 (quite a natural thing to install the &lt;em&gt;latest&lt;/em&gt; version).&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="alternative" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://saghul.github.io/pythonz/"&gt;pythonz&lt;/a&gt; is an alternative to Pyenv thats worth checking out
if pyenv doesn't work for you.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="realthreads" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;When people talk about &lt;em&gt;real&lt;/em&gt; threads what they essentially mean is that these threads are real CPU
threads, which are scheduled by the OS (Operating System).&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="zip" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#zip"&gt;https://docs.python.org/3/library/functions.html#zip&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="enumerate" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;enumerate&lt;/code&gt; can be further configured to produce the kind of index you want.
&lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#enumerate"&gt;https://docs.python.org/3/library/functions.html#enumerate&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="abarnert" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://stackoverflow.com/users/908494/abarnert"&gt;http://stackoverflow.com/users/908494/abarnert&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="problems"></category></entry><entry><title>An Open Letter To StackOverflow Election Winners</title><link href="http://nafiulis.me/an-open-letter-stackoverflow-election-winners.html" rel="alternate"></link><published>2015-04-21T14:21:00+06:00</published><updated>2015-04-21T14:21:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2015-04-21:an-open-letter-stackoverflow-election-winners.html</id><summary type="html">&lt;p&gt;Almost three years ago, I found a relatively new site on the internet. It kept popping up on the first few search
results whenever I would be looking for an answer to a programming problem. You had trouble with Java? StackOverflow.
You don't understand how python generators work? StackOverflow. You have a question about how C++ friend classes worked?
StackOverflow. Because it was such a great site open to free membership, I decided to join.&lt;/p&gt;
&lt;p&gt;My time as a StackOverflow user started terribly.
The first question I asked was also one of the first question I deleted, because I thought it was so terrible!&lt;/p&gt;
&lt;p&gt;I was transitioning
from Java to Python after taking an online course on Python. I was quite new to computer science too. One of the
very first question was about the unary operator, &lt;code&gt;~&lt;/code&gt;.&lt;a class="footnote-reference" href="#tilde" id="id1"&gt;[1]&lt;/a&gt;
I didn't even know what it was called back then. Was it a &lt;em&gt;tridle&lt;/em&gt;?
Was it a &lt;em&gt;twiddle&lt;/em&gt;? What was it even called in the context of computer Science? I didn't know. That's why I asked the
question, I had never used it in writing.
I searched google, and all I got was several links pertaining to the &lt;code&gt;&amp;#64;&lt;/code&gt; symbol. I checked again just
now and it still does.&lt;/p&gt;
&lt;img alt="Google search results for at symbol" class="align-center" src="/images/open_letter_01.png" /&gt;
&lt;p&gt;I thought to myself that its a simple question, and I'm sure that this would be a valid one.
It was down-voted six times in total, where I thought it would be amicably met.
If you're the kind of arse that gets a kick out of making other people feel
crap about themselves, then the above example has earned nothing but a condescending sneer from you. If so, then you
don't need to keep on reading.&lt;/p&gt;
&lt;p&gt;This was a community that I &lt;em&gt;admired&lt;/em&gt;, &lt;em&gt;valued&lt;/em&gt; and &lt;em&gt;looked up to&lt;/em&gt;. When &lt;em&gt;six&lt;/em&gt; of this community
conveyed how &lt;em&gt;stupid&lt;/em&gt; my question was, I was totally crushed.&lt;/p&gt;
&lt;p&gt;Wouldn't you be? If the very community you had come to admire had told you that you had the intelligence of a goat,
how would you feel? I felt so ashamed that I deleted the question. Such a stupid question is &lt;em&gt;undeserving&lt;/em&gt; of
StackOverflow. In a site that is completely transparent like StackOverflow, all your stupidity is neatly documented
in the questions that you've asked. All your deficiencies are there for the world to see. So I started deleting
my questions.&lt;/p&gt;
&lt;p&gt;But then, I got banned from asking questions entirely. No one told me what I was banned either.
Did the StackOverflow bot determine that I was a terrible programmer, and that I had not belong here?
Did I not make the cut? Was there a limit to how many times you could be down-voted when starting out?&lt;/p&gt;
&lt;p&gt;Fast-forward to now, and you &lt;em&gt;still&lt;/em&gt; get this kind of behaviour.&lt;a class="footnote-reference" href="#still" id="id2"&gt;[2]&lt;/a&gt;
Trigger happy down-votes and close votes are the
&lt;em&gt;norm&lt;/em&gt; now. The thing that's changed is that I've answered a few questions and asked a few more too.&lt;/p&gt;
&lt;p&gt;I wanted to stand in the elections. I didn't because I don't think I'm anywhere &lt;em&gt;near&lt;/em&gt; good enough. You need to have
plenty of reputation and badges to stand a chance of winning. I don't so I voted for the people who I believe
will be a &lt;em&gt;little&lt;/em&gt; kinder and gentler to new users.&lt;/p&gt;
&lt;p&gt;So, whoever you three are, I hope you're kinder to newbies. You might think that StackOverflow is too big and too
important to fail. Make no mistake that bars need to be set and examples made. However, that does not give us
license to be cruel to new users who value what we do here and &lt;em&gt;want&lt;/em&gt; to contribute.&lt;/p&gt;
&lt;p&gt;I know I'm &lt;em&gt;no one&lt;/em&gt; to tell the highly esteemed winners of the elections what to do. I forfeited that right when
I chose not to stand. However, I beg of you to consider the consequences of the chronic levels of intolerance that
we show new comers.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="tilde" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/18742078/what-does-the-operator-do-in-python"&gt;http://stackoverflow.com/questions/18742078/what-does-the-operator-do-in-python&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="still" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;You can only see
&lt;a class="reference external" href="http://stackoverflow.com/questions/29700432/searching-for-duplicate-values-in-a-dictionary"&gt;this&lt;/a&gt;
if you have the ability to see deleted questions. OP asked a simple question, got down-voted 8 times.
Eventually deleted the question. This could eventually lead to OP getting question-banned.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="community"></category><category term="StackOverflow"></category><category term="elections"></category><category term="newbies"></category></entry><entry><title>The Deceptive Anagram Question</title><link href="http://nafiulis.me/the-deceptive-anagram-question.html" rel="alternate"></link><published>2015-04-16T00:10:00+06:00</published><updated>2015-04-16T00:10:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2015-04-16:the-deceptive-anagram-question.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-question" id="id5"&gt;The Question&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#an-example" id="id6"&gt;An Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#quadratic-time" id="id7"&gt;Quadratic Time&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#initial-solution" id="id8"&gt;Initial Solution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#linear-time" id="id9"&gt;Linear Time&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#hashing-the-right-way" id="id10"&gt;Hashing The Right Way&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-pythonic-version" id="id11"&gt;The Pythonic Version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#ordering-done-right" id="id12"&gt;Ordering Done Right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#profiling" id="id13"&gt;Profiling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#a-vector-approach-to-hashing" id="id14"&gt;A Vector Approach to Hashing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-final-frontier" id="id15"&gt;The Final Frontier&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#but-there-s-an-import-for-that" id="id16"&gt;But There's An Import For That&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#lessons-learnt" id="id17"&gt;Lessons Learnt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#acknowledgments" id="id18"&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Last month, I had a programming interview. It hadn't gone as I would've liked, but I did get asked a question that I
found interesting. The question is deceptively simple, but has a lot of depth to it. Since I failed to solve the
problem correctly in the interview, I decided explore the ways in which I could optimize my initially O(n&lt;sup&gt;2&lt;/sup&gt;)
solution.&lt;/p&gt;
&lt;p&gt;After a few attempts at solving the problem from different angles, I've come to appreciate the importance of
understanding complexity, as well as its limitations.&lt;/p&gt;
&lt;div class="section" id="the-question"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;The Question&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The question was simple:&lt;/p&gt;
&lt;blockquote&gt;
Given a list of words L, find all the anagrams in L in the order in which they appear in L.&lt;/blockquote&gt;
&lt;div class="section" id="an-example"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;An Example&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given the input&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loco&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;satin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pretty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The desired output would be&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loco&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;satin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in that order &lt;em&gt;exactly&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="quadratic-time"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Quadratic Time&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The naive solution to this will give you an O(n&lt;sup&gt;2&lt;/sup&gt;) algorithm. Be warned, the following code may burn your eyes.&lt;/p&gt;
&lt;div class="section" id="initial-solution"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Initial Solution&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;anagram_finder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;_ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;other_word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other_word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;_ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;_ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other_word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_ret&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;anagram_finder&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loco&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;satin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pretty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is &lt;em&gt;wrong&lt;/em&gt; on so many levels, I don't even know &lt;em&gt;where&lt;/em&gt; to begin.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The problem solves the solution in quadratic time meaning, for more computing power we throw at this
the slower it gets per computer. Imagine if we were to put an algorithm like this in the server, we would have
serious scaling issues.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collections.Counter&lt;/code&gt; is expensive. It needs to create a dictionary, then it needs to add &lt;em&gt;each&lt;/em&gt; character
to the dictionary, that means &lt;em&gt;hashing&lt;/em&gt; each character.&lt;/li&gt;
&lt;li&gt;It adds the original word every single time it finds an anagram, and relies on &lt;code&gt;set&lt;/code&gt; not to add
duplicate values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm probably missing a few points but the point remains; this is seriously bad code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="linear-time"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Linear Time&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, how can we turn this problem form an O(n&lt;sup&gt;2&lt;/sup&gt;) solution into an O(n) solution? Using hash-maps correctly.
Unfortunately, I did not come up with the brilliant idea of using a hash-map, but rather my interviewer told me
that the way to get O(n) was to use a hash-map.&lt;/p&gt;
&lt;div class="section" id="hashing-the-right-way"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;Hashing The Right Way&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In general, whenever you hear the word &amp;quot;hash&amp;quot; you think md5 or SHA. But in reality, a hash is a way
to map data in a uniform way. Think of it like this, if you have a the word &lt;em&gt;pool&lt;/em&gt; and &lt;em&gt;loop&lt;/em&gt;, in the eyes of the
anagram solver, they are the same. Why? Because &lt;em&gt;both&lt;/em&gt; words use the same characters. In other words, there had to be
a uniform way to converting these two words into the &lt;em&gt;same&lt;/em&gt; thing. If we were to simply &lt;em&gt;sort&lt;/em&gt; the characters in the
word, we'd get exactly what we're looking for. Here's a demonstration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;loop&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;loop&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that, I had my hashing function and with it, I had my linear solution.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# 1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;anagram_finder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;hash_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;  &lt;span class="c1"&gt;# 2&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# 4&lt;/span&gt;
            &lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  &lt;span class="c1"&gt;# 5&lt;/span&gt;

        &lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 6&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;anagram&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;anagram&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# 7&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anagram_finder&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loco&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;satin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pretty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;1&lt;/code&gt;, we create the &lt;code&gt;hasher&lt;/code&gt; function. The hash is simple, it sorts the string alphabetically using
&lt;code&gt;sorted&lt;/code&gt;, which returns a list, which we then use as an iterable for &lt;code&gt;&amp;quot;&amp;quot;.join&lt;/code&gt; to create a string. We
do this because python lists are not hashable (because they are mutable).&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;2&lt;/code&gt;, inside the &lt;code&gt;anagram_finder&lt;/code&gt; function, we create a &lt;code&gt;hash_dict&lt;/code&gt;, a dictionary for all our hashes.
It must be pointed out that the dictionary, when adding new keys,
will hash those keys as well.&lt;a class="footnote-reference" href="#howstringsarehashed" id="id1"&gt;[1]&lt;/a&gt; The worst case for &lt;code&gt;hasher&lt;/code&gt; is O(n) where n is the length
of the word in question, so no issue with the size of the list we're given.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;3&lt;/code&gt; we actually call the &lt;code&gt;hasher&lt;/code&gt; to hash the string. In &lt;code class="coderef"&gt;4&lt;/code&gt;, we check to see if this hash exists in the
keys of &lt;code&gt;hash_dict&lt;/code&gt;. If not, then we create a new list so that we can append words to it in &lt;code class="coderef"&gt;5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the end, we &lt;em&gt;always&lt;/em&gt; append the word to the list of that key in &lt;code class="coderef"&gt;6&lt;/code&gt;. This means, that every key will always have
&lt;em&gt;at least one&lt;/em&gt; value stored in its list, and these values are the ones we don't one.&lt;/p&gt;
&lt;p&gt;The simplified version of &lt;code class="coderef"&gt;7&lt;/code&gt; is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;_ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;_ret&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-pythonic-version"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id11"&gt;The Pythonic Version&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The above is great for explanation, but the pythonic version is much smaller:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;anagram_finder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;hash_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 1&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;anagram&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;anagram&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anagram_finder&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loco&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;satin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pretty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We've made the code significantly smaller by using a &lt;code&gt;defaultdict&lt;/code&gt; in &lt;code class="coderef"&gt;1&lt;/code&gt;. &lt;code&gt;defaultdict&lt;/code&gt; allows us to
give it a factory, in this case &lt;code&gt;list&lt;/code&gt;, that will automatically create a list with a key if a key does not exist.
If it does exist, then it will return that list, and we can append to it.&lt;a class="footnote-reference" href="#moreondefaultdict" id="id2"&gt;[3]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But wait, we forgot about the ordering.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ordering-done-right"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Ordering Done Right&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We have a quick fix for the ordering, and that is simply to loop through all the words in the initial list and include
only those that is in the list of anagrams. The solution is &lt;em&gt;still&lt;/em&gt; O(n), but remains highly inefficient.
One thought might be to use the &lt;code&gt;collections.OrderedDict&lt;/code&gt; class. But although that might &lt;em&gt;seem&lt;/em&gt; to
work, the ordering will still not match the original in the case where anagrams are not next to each other.
For example, the following piece of code will return:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;anagram_finder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;hash_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;anagram&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;anagram&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anagram_finder&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nala&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loco&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;satin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pretty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;laan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nala&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;laan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pool&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loco&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cool&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;stain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;satin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;nala&lt;/code&gt; and &lt;code&gt;laan&lt;/code&gt; should not be next to each other. This is because &lt;code&gt;collections.OrderedDict&lt;/code&gt;
remembers the order in which the &lt;em&gt;keys&lt;/em&gt; were added.&lt;/p&gt;
&lt;p&gt;So, in the end, I stuck to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;anagram_finder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;hash_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anagram_finder&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nala&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loco&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;satin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pretty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;laan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that, we solved the &lt;em&gt;ordering&lt;/em&gt; problem and still managed to make it linear.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="profiling"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;Profiling&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We never know how well something will actually work unless we profile it. So I got a big list of words&lt;a class="footnote-reference" href="#biglist" id="id3"&gt;[2]&lt;/a&gt;
and go to profiling.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;anagram_finder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;hash_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wordsEn.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;w_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;anagram_finder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I used a library called &lt;a class="reference external" href="https://github.com/what-studio/profiling"&gt;profiling&lt;/a&gt;, and it can be installed with a simple
pip install. After profiling the above code, I found that my &lt;code&gt;hasher&lt;/code&gt; function was actually making the the
whole process a lot slower, because it was being called &lt;em&gt;twice&lt;/em&gt;.&lt;/p&gt;
&lt;img alt="Profiling without storing hash values" class="align-center" src="/images/anagrams_profile_01.png" /&gt;
&lt;p&gt;So, my first attempt (like a good pythonista) was to use &lt;code&gt;functools.lru_cache&lt;/code&gt;. That attempt failed
spectacularly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;lru_cache&lt;/span&gt;

&lt;span class="nd"&gt;@lru_cache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;anagram_finder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;hash_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wordsEn.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;w_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;anagram_finder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is because there were excessive calls being made all over the place. Even increasing the size of the cache from
&lt;code&gt;lru_cache()&lt;/code&gt; which has a default if &lt;code&gt;128&lt;/code&gt; to &lt;code&gt;lru_cache(11000)&lt;/code&gt; which is roughly the size of the
word list I'm using. In fact, increasing the &lt;code&gt;lru_cache&lt;/code&gt; size to such an amount slowed down the program so much
that I didn't wait for it to finish, but the root problem was the same; too many calls were being made all over the
place.&lt;/p&gt;
&lt;img alt="Using LRU cache this time" class="align-center" src="/images/anagrams_profile_02.png" /&gt;
&lt;p&gt;So, to compare the two programs, with lru and without lru, we can see that the program &lt;em&gt;without&lt;/em&gt; lru was significantly
faster than the one &lt;em&gt;with&lt;/em&gt; lru (4.77 seconds to 15.31 seconds. With the failure or &lt;code&gt;lru_cache&lt;/code&gt; as a feasible
solution, I decided to just use a normal dictionary to store hashes. In our original attempt, &lt;code&gt;hasher&lt;/code&gt; was being
called twice, once to add words to the dictionary, and then in the list comprehension. Why not just use a dictionary
to store the hash and the word?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;anagram_finder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;hash_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hashes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;hashes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hashes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hash_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hashes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wordsEn.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;w_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;anagram_finder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We just create a new dictionary, &lt;code&gt;hashes&lt;/code&gt; to store all our hash and word pairs. This resulted in a speedup.&lt;/p&gt;
&lt;img alt="This time with the hashes dictionary" class="align-center" src="/images/anagrams_profile_03.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="a-vector-approach-to-hashing"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;A Vector Approach to Hashing&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another approach to hashing would be to use a vector to determine the number of letters that appear in a word.
This is better explained through code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;                   &lt;span class="c1"&gt;# 1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# 2&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                &lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;1&lt;/code&gt;, we create a list of length 26, having all its values initialized to 0. In &lt;code class="coderef"&gt;2&lt;/code&gt;, we calculate the rank of the
letter in the english alphabet using &lt;code&gt;ord(c) - ord(a)&lt;/code&gt;. We use this rank as the index of our list. We then
add 1 to the value of the index. In other words we are merely counting the frequency of the letters in a word; very
similar to a histogram.&lt;/p&gt;
&lt;p&gt;The above is O(n) compared to the O(n log(n)) solution that sorting a string gives us (n is the number of characters
in the word here). However, considering that the average size of a word in the english language is actually 5 and
the average size of a word in my &lt;code&gt;wordsEn.txt&lt;/code&gt; file is 8, O(n) actually becomes the &lt;em&gt;smaller&lt;/em&gt; problem here, and
the constant time that is required to create a list of 26 items is the bigger problem. In other words, its O(26) for
list creation and initiation. Its O(n) for creating the rank and its O(26) for creating the tuple.&lt;/p&gt;
&lt;p&gt;Compare that to O(n log(n)) worst case for using &lt;code&gt;sorted&lt;/code&gt;. In this particular use case since n is very low,
the better option is to use &lt;code&gt;sorted&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-final-frontier"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;The Final Frontier&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The best solution to this problem however is not one of my own making, but rather one that a friend of mine
(Alexander) provided me with. My solution actually is superfluous in many cases, but the following cuts straight to
the point:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;izip&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_anagrams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;normalized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# 1&lt;/span&gt;

    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 2&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;normalized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="c1"&gt;# 4&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;izip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;normalized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# 5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The genius of this approach is to use &lt;code&gt;collections.defaultdict&lt;/code&gt; with &lt;code&gt;int&lt;/code&gt; as the factory. This basically
means that you have a smaller memory footprint. So, in &lt;code class="coderef"&gt;1&lt;/code&gt;, we get a list of hashed values (which he calls normalized).
In &lt;code class="coderef"&gt;2&lt;/code&gt;, we create a &lt;code&gt;defaultdict&lt;/code&gt; of int, this means that all the keys will have an initial value of 0.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;3&lt;/code&gt;, we loop over all the normalized/hashed values. &lt;code class="coderef"&gt;4&lt;/code&gt; is where the magic happens. So, there will be duplicates
in &lt;code&gt;normalized&lt;/code&gt;, and we are going to count the number of times each of those normalized values appear.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;5&lt;/code&gt;, we zip over the initial word list, &lt;code&gt;words&lt;/code&gt; and &lt;code&gt;normalized&lt;/code&gt;. Remember, that &lt;em&gt;all&lt;/em&gt; the words are
normalized. All we do then is simply check to see if the number of times the normalized value of the word appears in
&lt;code&gt;d&lt;/code&gt;. If there's more than one occurrence, we add the word to the final list in this list comprehension.&lt;/p&gt;
&lt;div class="section" id="but-there-s-an-import-for-that"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;But There's An Import For That&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the very beginning, I used &lt;code&gt;collections.Counter&lt;/code&gt;, to provide the &lt;em&gt;worst&lt;/em&gt; possible solution to the problem.
But, I think this time, we can actually use &lt;code&gt;collections.Counter&lt;/code&gt; correctly, because &lt;code class="coderef"&gt;2&lt;/code&gt;, &lt;code class="coderef"&gt;3&lt;/code&gt; and &lt;code class="coderef"&gt;4&lt;/code&gt; can
be shortened to just &lt;code&gt;Counter(normalized)&lt;/code&gt;. So the &lt;em&gt;final final&lt;/em&gt; (gosh, that feels javaish) version is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_anagrams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;normalized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;izip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;normalized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="lessons-learnt"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;Lessons Learnt&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hash Maps are very important. Learn to use them properly.&lt;/li&gt;
&lt;li&gt;When making an algorithm don't think standard library, think of finding the best algorithmic solution.&lt;/li&gt;
&lt;li&gt;After you've found the algorithmic solution try optimizing it using the standard library.&lt;/li&gt;
&lt;li&gt;Quadratic time is worse than you can imagine.&lt;/li&gt;
&lt;li&gt;Complexity analysis alone is a blunt instrument so always profile.&lt;/li&gt;
&lt;li&gt;Just because an algorithm has better worst case complexity doesn't mean that
its the best one for the job.&lt;/li&gt;
&lt;li&gt;Sometimes our brains stop working under pressure. Take a deep breath, stop worrying about what will happen if you
&lt;em&gt;don't&lt;/em&gt; solved the problem and focus on all the good things that will happen if you &lt;em&gt;do&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="acknowledgments"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;Acknowledgments&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Ashwin&lt;/strong&gt; (&amp;#64;inspectorG4dget) for helping me answer this question and explaining the vector approach
to hashing. Ashwin's help has been paramount to my understanding.&lt;/p&gt;
&lt;p&gt;To my interviewer for giving me a very good question, and to &lt;strong&gt;Ridwan&lt;/strong&gt; (&amp;#64;hjr265)
for pointing out flaws in my solution and for encouraging me to write a blog post on this problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alexander&lt;/strong&gt; (&amp;#64;metaprogrammer) for proof reading this post and providing me with the optimal solution to
this problem.&lt;a class="footnote-reference" href="#whoisalexander" id="id4"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="howstringsarehashed" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://effbot.org/zone/python-hash.htm"&gt;Python Hash Algorithms&lt;/a&gt; explains in detail
how the different hash functions in Python actually work.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="biglist" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://www-01.sil.org/linguistics/wordlists/english/"&gt;wordsEn.txt&lt;/a&gt; is the list I used.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="moreondefaultdict" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.accelebrate.com/blog/using-defaultdict-python/"&gt;Using defaultdict in Python&lt;/a&gt;
is a great writeup on how to use &lt;code&gt;defaultdict&lt;/code&gt;. It explains the concept of a factory as well.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="whoisalexander" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Alexander Kozlovsky is the creator of Pony ORM.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="interview"></category><category term="puzzles"></category><category term="optimization"></category><category term="python"></category><category term="hash-map"></category><category term="algorithms"></category><category term="linear-time"></category><category term="complexity"></category></entry><entry><title>PyCharm: The Good Parts II</title><link href="http://nafiulis.me/pycharm-the-good-parts-ii.html" rel="alternate"></link><published>2015-01-18T18:06:00+06:00</published><updated>2015-01-18T18:06:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2015-01-18:pycharm-the-good-parts-ii.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#code-completion" id="id6"&gt;Code Completion&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#smart-completion" id="id7"&gt;Smart Completion&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#runtime-information" id="id8"&gt;Runtime Information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#docstrings" id="id9"&gt;Docstrings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#assert-statements" id="id10"&gt;Assert Statements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#hippie-complete" id="id11"&gt;Hippie Complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#spelling-correction" id="id12"&gt;Spelling Correction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#language-injection" id="id13"&gt;Language Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#editor" id="id14"&gt;Editor&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#font" id="id15"&gt;Font&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#braces-and-quotes" id="id16"&gt;Braces and Quotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#case-sensitive-completion" id="id17"&gt;Case Sensitive Completion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#up-next" id="id18"&gt;Up Next&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#previously" id="id19"&gt;Previously&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#update" id="id20"&gt;Update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Before we begin, I must talk about what I mean by editing, and what I intend to cover. I believe
that the most important thing about editing is code completion. In this section I pay special attention to
python although PyCharm offers superb code completion for other languages like SQL and JavaScript.&lt;a class="footnote-reference" href="#webtools" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I start off with code completion, because if you're like me, you have little time and want to dive into the thick of
things and code completion is what we want most out of an IDE.&lt;/p&gt;
&lt;p&gt;Then, I talk about a couple of editor settings that help keep me sane.&lt;/p&gt;
&lt;div class="section" id="code-completion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Code Completion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PyCharm's editor is very powerful and extensible. In this section we will go over some useful tools that I use to
write less error prone code faster.&lt;/p&gt;
&lt;div class="section" id="smart-completion"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Smart Completion&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You get suggestions as you type. You can further enhance this by the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Collecting runtime information&lt;/li&gt;
&lt;li&gt;Adding docstrings to functions and methods&lt;/li&gt;
&lt;li&gt;Invoking &lt;code&gt;assert&lt;/code&gt; statements&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="runtime-information"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id8"&gt;Runtime Information&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Lets start with the easiest enhancement. All we need to do is check this box, and PyCharm will give you better
code completion as you debug your program more:&lt;/p&gt;
&lt;img alt="Runtime info" class="align-center" src="/images/charm_good_parts_07.png" /&gt;
&lt;p&gt;If you ever get wrong suggestions for completion clear the caches. Running your tests in debug mode will also give
PyCharm a better chance to get an understanding of the types that you're using.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="docstrings"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id9"&gt;Docstrings&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Writing docstrings helps PyCharm, but also helps developers gain a better understanding of the code that you have
written. PyCharm &lt;em&gt;understands&lt;/em&gt; docstrings and uses the information in them to give you code completion and give
you warning signals if it thinks you're being inconsistent:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="sd"&gt;    :param a: A for apple&lt;/span&gt;
&lt;span class="sd"&gt;    :type a: str&lt;/span&gt;

&lt;span class="sd"&gt;    :param b: B for ball&lt;/span&gt;
&lt;span class="sd"&gt;    :type b: str&lt;/span&gt;

&lt;span class="sd"&gt;    :param c: C for cat&lt;/span&gt;
&lt;span class="sd"&gt;    :type c: str&lt;/span&gt;

&lt;span class="sd"&gt;    :return: The answer to everything is 42. Remember ye well!&lt;/span&gt;
&lt;span class="sd"&gt;    :rtype: int&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the example above, I've used PyCharm tells me that I'm being inconsistent:&lt;/p&gt;
&lt;img alt="PyCharm yells at me" class="align-center" src="/images/charm_good_parts_10.png" /&gt;
&lt;p&gt;But there's more! If you wrote docstrings, then PyCharm will give you a beautiful documentation popup about your
variables (by using &lt;em&gt;quick documentation&lt;/em&gt;):&lt;a class="footnote-reference" href="#keymap" id="id2"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;img alt="Beautiful docs" class="align-center" src="/images/charm_good_parts_11.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="assert-statements"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id10"&gt;Assert Statements&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;assert&lt;/code&gt; statements can help tell PyCharm what types you should expect. Please note that, &lt;code&gt;assert&lt;/code&gt; statements
are not overhead free, unlike docstrings. I would advise using them in tests, so that the
&lt;a class="reference internal" href="#runtime-information"&gt;debugger&lt;/a&gt; can collect type information about your parameters. For example, the following will give code completions for
&lt;code&gt;a&lt;/code&gt; but not for &lt;code&gt;b&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is because PyCharm knows about &lt;code&gt;a&lt;/code&gt;,
and that its a string, but it doesn't know about &lt;code&gt;b&lt;/code&gt;:&lt;/p&gt;
&lt;img alt="Code completion for b" class="align-center" src="/images/charm_good_parts_12.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hippie-complete"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Hippie Complete&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hippie Complete or Cyclic completion is best explained with a video:&lt;/p&gt;
&lt;div class="external youtube"&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/jiaGFNnRL4o" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;Basically, it completes the word based on previous words you've typed &lt;em&gt;in the same document&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="spelling-correction"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Spelling Correction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;PyCharm also offers spelling correction as a quick fix. If you misspell &amp;quot;massachussets&amp;quot; like so:&lt;/p&gt;
&lt;img alt="Spelling" class="align-center" src="/images/charm_good_parts_16.png" /&gt;
&lt;p&gt;Then you can try quick fixing it with &lt;kbd class="light"&gt;⌥&lt;/kbd&gt; + &lt;kbd class="light"&gt;return&lt;/kbd&gt;. After you hit &lt;kbd class="light"&gt;return&lt;/kbd&gt; on the first option above, you
should see correction options:&lt;/p&gt;
&lt;img alt="Correction options" class="align-center" src="/images/charm_good_parts_17.png" /&gt;
&lt;p&gt;&lt;em&gt;This was a request on reddit&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="language-injection"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;Language Injection&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Language Inject basically means that you can &lt;em&gt;inject&lt;/em&gt; other languages into Python strings, and have python
&lt;em&gt;recognize&lt;/em&gt; those languages. This comes in really handy when you're trying to syntax highlighting for regex or
html, but it goes further than that often providing code completion. In order to get language injection, one must
invoke the &lt;em&gt;quick fix&lt;/em&gt; command inside string delimiters (&lt;code&gt;''&lt;/code&gt;).&lt;a class="footnote-reference" href="#keymap" id="id3"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is a video to demonstrate how language injection works:&lt;a class="footnote-reference" href="#emmet" id="id4"&gt;[3]&lt;/a&gt;&lt;/p&gt;
&lt;div class="external youtube"&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/ZmBe0CCQZk0" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="editor"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Editor&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This part covers the settings regarding the editor for better workflow. The options I set are based on my own preferences
and hence not scientifically tested but they &lt;em&gt;do&lt;/em&gt; make &lt;em&gt;my&lt;/em&gt; editing a lot faster. Take the following advice with a
healthy dose of skepticism since what might work for me, might not work for you.&lt;/p&gt;
&lt;div class="section" id="font"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;Font&lt;/a&gt;&lt;/h3&gt;
&lt;img alt="Consolas FTW!" class="align-center" src="/images/charm_good_parts_13.png" /&gt;
&lt;p&gt;Consolas is the only font that looks good on Windows, Mac and Linux. Consolas remains monospace regardless of
whether it is bold or italic, and the only font that looks consistently good in PyCharm. I have tested this on Mac OSX
Yosemite, Windows 8.1 and Ubuntu (14.04).&lt;a class="footnote-reference" href="#gettingconsonlinux" id="id5"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you've had success with other fonts (especially in Linux), please do mention them in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="braces-and-quotes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;Braces and Quotes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A lot of the time, I forget to put parentheses around things or quotes around strings. By enabling the following
option, you can select text, and when you press &lt;kbd class="light"&gt;&amp;quot;&lt;/kbd&gt; or &lt;kbd class="light"&gt;'&lt;/kbd&gt; or &lt;kbd class="light"&gt;(&lt;/kbd&gt; or &lt;kbd class="light"&gt;)&lt;/kbd&gt;, instead of replacing the text with
the character entered, it will surround the selection with quotes or parentheses:&lt;/p&gt;
&lt;img alt="Parens!" class="align-center" src="/images/charm_good_parts_14.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="case-sensitive-completion"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;Case Sensitive Completion&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By default, PyCharm comes with &lt;em&gt;first letter&lt;/em&gt; case sensitivity, meaning that if you were to type &lt;code&gt;e&lt;/code&gt;,
&lt;code&gt;Exception&lt;/code&gt; would not be offered as a viable completion. This is why I disable case sensitivity:&lt;/p&gt;
&lt;img alt="Case Sensitivity" class="align-center" src="/images/charm_good_parts_15.png" /&gt;
&lt;p&gt;Please note however, that on slower machines this does make code completion slower.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="up-next"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;Up Next&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I will likely be covering how to deal with interpreters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="previously"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;Previously&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I talked about a couple of things in &lt;a class="reference external" href="http://nafiulis.me/pycharm-the-good-parts-i.html"&gt;part one&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;Update&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;2015-01-19 11:41&lt;/em&gt; : Added a section on &lt;a class="reference internal" href="#spelling-correction"&gt;Spelling Correction&lt;/a&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="webtools" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I will cover javascript, html and other stuff in another section that deals with web tools. Don't worry I know that they are indispensable tools, and will make sure to give them the time they deserve.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="keymap" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[2]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id2"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id3"&gt;2&lt;/a&gt;)&lt;/em&gt; Use the &lt;a class="reference external" href="http://nafiulis.me/pycharm-the-good-parts-i.html#keymap"&gt;keymap&lt;/a&gt; to find your corresponding keyboard shortcut discussed in the previous part.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="emmet" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Don't worry if you don't know what emmet does, I'll cover that when I cover web tools.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="gettingconsonlinux" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;div class="first last line-block"&gt;
&lt;div class="line"&gt;Take a look at this answer if you want to use consolas on Ubuntu:&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://askubuntu.com/questions/269757/consolas-not-visible-in-intellij-idea-on-ubuntu-12-04"&gt;http://askubuntu.com/questions/269757/consolas-not-visible-in-intellij-idea-on-ubuntu-12-04&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="pycharm"></category><category term="python"></category><category term="ide"></category><category term="series"></category><category term="pycharm-the-good-parts"></category></entry><entry><title>PyCharm: The Good Parts I</title><link href="http://nafiulis.me/pycharm-the-good-parts-i.html" rel="alternate"></link><published>2015-01-17T12:09:00+06:00</published><updated>2015-01-17T12:09:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2015-01-17:pycharm-the-good-parts-i.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#productivity-guide" id="id4"&gt;Productivity Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#starting-out" id="id5"&gt;Starting Out&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#keyboard-shortcuts" id="id6"&gt;Keyboard Shortcuts&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#keymap" id="id7"&gt;Keymap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#find-action" id="id8"&gt;Find Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#useful-shortcuts" id="id9"&gt;Useful Shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#navigation" id="id10"&gt;Navigation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#macro" id="id11"&gt;Macro&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#back-and-forward" id="id12"&gt;Back and Forward&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#search-everywhere" id="id13"&gt;Search Everywhere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#switcher" id="id14"&gt;Switcher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#micro" id="id15"&gt;Micro&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#structure" id="id16"&gt;Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#acejump" id="id17"&gt;AceJump&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#up-next" id="id18"&gt;Up Next&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#update" id="id19"&gt;Update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;tldr:&lt;/strong&gt; If you don't have the time to read the entire post, just read &lt;a class="reference internal" href="#productivity-guide"&gt;Productivity Guide&lt;/a&gt;, because I assume
that you want better productivity as your primary goal.&lt;/p&gt;
&lt;p&gt;PyCharm is a very powerful IDE, and has a multitude of features that keep growing at a large pace. PyCharm is
essentially, a plugin built on top of the IntelliJ platform, Jetbrains' main IDE. Because PyCharm borrows
from a whole host of features available from IntelliJ, its easy to get lost. &lt;a class="footnote-reference" href="#jb" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post shows you some of the best features that PyCharm has to offer, and how to use those features properly.
I assume that you've installed plugins and know your way around the IDE. The table of contents should give you an
idea of what is covered in this post.&lt;/p&gt;
&lt;div class="section" id="productivity-guide"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Productivity Guide&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You might not know this, but PyCharm tracks what features you use, and tells you how productive you are being in your
productivity guide:&lt;/p&gt;
&lt;img alt="How to get to the productivity guide" class="align-center" src="/images/charm_good_parts_01.png" /&gt;
&lt;p&gt;The productivity guide gives you detailed descriptions of what features can help you code faster. You can see below
that although I don't use all the features, I do use some quite a lot:&lt;/p&gt;
&lt;img alt="What features the Productivity guide I use" class="align-center" src="/images/charm_good_parts_02.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="starting-out"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Starting Out&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PyCharm touts its project creation wizard a lot, and for Windows users is a godsend because you can easily create a
project and associate a virtualenv with it. However for *nix users, the best option is to start PyCharm from the
command line, and you can do this by creating a command line launcher:&lt;/p&gt;
&lt;img alt="Command Line Launcher" class="align-center" src="/images/charm_good_parts_08.png" /&gt;
&lt;p&gt;There is one thing that you need to know about starting from the command line is that PyCharm uses the interpreter that
the &lt;code&gt;python&lt;/code&gt; command is linked to. So for example, if your &lt;code&gt;python&lt;/code&gt; command in the shell links to
&lt;code&gt;/usr/bin/python&lt;/code&gt;, then that interpreter will become the interpreter for your new project. However, if you want
to have the interpreter as a virtualenv, you have to create the virtualenv, activate it and then use the command line
launcher to initialize your project. If we do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir SimpleProjectDir
$ &lt;span class="nb"&gt;cd&lt;/span&gt; SimpleProjectDir
$ charm .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It would create a PyCharm project in &lt;code&gt;SimpleProjectDir&lt;/code&gt; and use the default interpreter in the shell like so:&lt;/p&gt;
&lt;img alt="Bad Interpreter" class="align-center" src="/images/charm_good_parts_09.png" /&gt;
&lt;p&gt;We can see that it is the same &lt;code&gt;python&lt;/code&gt; that was linked to in our shell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which python
/usr/local/bin/python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, if we were to create a virtualenv beforehand and then create a project using the command line launcher,
we would get the virtualenv as the interpreter instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir SimpleProjectDir
$ &lt;span class="nb"&gt;cd&lt;/span&gt; SimpleProjectDir
$ virtualenv .venv
New python executable in .venv/bin/python2.7
Also creating executable in .venv/bin/python
Installing setuptools, pip...done.

$ &lt;span class="nb"&gt;source&lt;/span&gt; .venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt;$ charm .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In simple terms, whatever &lt;code&gt;python&lt;/code&gt; points to in the shell at the time of using the command line launcher,
PyCharm will adopt that interpreter as the project interpreter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="keyboard-shortcuts"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Keyboard Shortcuts&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="keymap"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Keymap&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;PyCharm allows you to see all your keyboard shortcuts using the &lt;em&gt;Keymap&lt;/em&gt;. &lt;em&gt;Keymap&lt;/em&gt; has two key features which aid
in development. One being the ability to find keyboard shortcuts based on what they're called:&lt;/p&gt;
&lt;img alt="Finding the Keymap based on what you are searching for" class="align-center" src="/images/charm_good_parts_04.png" /&gt;
&lt;p&gt;But it also allows you to find shortcuts based on the keys themselves, so that you can talk other people about them:&lt;/p&gt;
&lt;div class="external youtube"&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/1MLGZyzOO6U" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;So, whenever I talk about an action like &amp;quot;Find Action&amp;quot; or &amp;quot;Search Anywhere&amp;quot;, just search it up on your keymap to see
the corresponding keyboard shortcut.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="find-action"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Find Action&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The best way to learn Keyboard shortcuts is to use &lt;em&gt;Find Action&lt;/em&gt;. &lt;a class="footnote-reference" href="#findaction" id="id2"&gt;[2]&lt;/a&gt;
Every time you use an action using find action, the keyboard shortcut
is also denoted on the right:&lt;/p&gt;
&lt;img alt="Shortcuts in Find Action" class="align-center" src="/images/charm_good_parts_03.png" /&gt;
&lt;p&gt;Whatever you find yourself using over and over again through &lt;em&gt;Find Action&lt;/em&gt;, just commit it to memory and you'll
be saving yourself some time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="useful-shortcuts"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Useful Shortcuts&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Use the Keymap to find what shortcuts these commands refer to: &lt;a class="footnote-reference" href="#cantfind" id="id3"&gt;[3]&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Find Action&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search Everywhere&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Find&lt;/li&gt;
&lt;li&gt;Structure&lt;/li&gt;
&lt;li&gt;Add Selection for Next Occurrence&lt;/li&gt;
&lt;li&gt;Switcher&lt;/li&gt;
&lt;li&gt;Check In Project&lt;/li&gt;
&lt;li&gt;Syntax Aware Selection&lt;/li&gt;
&lt;li&gt;New&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first two features are must use shortcuts, and will aid you in learning more shortcuts as you see fit. The others
are shortcuts I use regularly, and find helpful.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="navigation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Navigation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This section covers how to get from place to place. I've divided it into two sections. One being &lt;a class="reference internal" href="#macro"&gt;Macro&lt;/a&gt; and the
other being &lt;a class="reference internal" href="#micro"&gt;Micro&lt;/a&gt;. Macro is about moving between files, panels and tools. Micro is about moving from place to place
&lt;em&gt;within&lt;/em&gt; a file.&lt;/p&gt;
&lt;div class="section" id="macro"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Macro&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="back-and-forward"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id12"&gt;Back and Forward&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is one of my most favorite features. &lt;em&gt;Back&lt;/em&gt; and &lt;em&gt;Forward&lt;/em&gt; allows you to go back to the place where your cursor was
previously. This is immensely powerful, and allows you to jump between places within files and places
between files. Let me demonstrate:&lt;/p&gt;
&lt;div class="external youtube"&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/xGm0IBRDXeg" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="search-everywhere"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id13"&gt;Search Everywhere&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;We need to find stuff all the time like functions, files, classes and methods. The best way to search for
classes, files, and directories is to use &lt;em&gt;Search Everywhere&lt;/em&gt; (press &lt;kbd class="light"&gt;SHIFT&lt;/kbd&gt; in quick succession):&lt;/p&gt;
&lt;img alt="Search Everywhere" class="align-center" src="/images/charm_good_parts_06.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="switcher"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id14"&gt;Switcher&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The other way is to use the &lt;em&gt;Switcher&lt;/em&gt;, which gives you quick access to your most recently used panels and files:&lt;/p&gt;
&lt;img alt="The Switcher" class="align-center" src="/images/charm_good_parts_05.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="micro"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;Micro&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="structure"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id16"&gt;Structure&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In order to find things within files, its best to use &lt;em&gt;Find&lt;/em&gt;, and for a more structural view, use &lt;em&gt;Structure&lt;/em&gt;.
The &lt;em&gt;Structure&lt;/em&gt; panel gives you a skeletal view of your file, with variables, classes, functions and methods.
It allows you to quickly navigate between important structures within your file:&lt;/p&gt;
&lt;div class="external youtube"&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/hCbCiqAaMA4" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="acejump"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id17"&gt;AceJump&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;AceJump is a plugin that allows you to quickly jump from place to place. Its a clone of Emacs' AceJump mode.
There are two superb videos by the creator of AceJump, John Lindquist on how to use the plugins.&lt;/p&gt;
&lt;div class="external youtube"&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/yK8eM50DsAY" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div class="external youtube"&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/i_XGEaceOLY" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;Installing a plugin is simple:&lt;/p&gt;
&lt;div class="external youtube"&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/DvUdxZVrJSc" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="up-next"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;Up Next&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the next part, I will cover editing in PyCharm, with special respect to taking control of its powerful code
completion feature-set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;Update&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On 2015-01-18 20:40&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nafiulis.me/pycharm-the-good-parts-ii.html"&gt;Part II&lt;/a&gt; is out now!&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="jb" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The creator of PyCharm, IntelliJ, RubyMine and other IDEs.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="findaction" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;div class="first last line-block"&gt;
&lt;div class="line"&gt;&lt;kbd class="light"&gt;⌘&lt;/kbd&gt; + &lt;kbd class="light"&gt;SHIFT&lt;/kbd&gt; + &lt;kbd class="light"&gt;A&lt;/kbd&gt; on Mac&lt;/div&gt;
&lt;div class="line"&gt;&lt;kbd class="light"&gt;CTRL&lt;/kbd&gt; + &lt;kbd class="light"&gt;SHIFT&lt;/kbd&gt; + &lt;kbd class="light"&gt;A&lt;/kbd&gt; on Windows and Linux&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="cantfind" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If you can't find any of these, then you're using an older version of PyCharm.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;strong&gt;Pingback&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://news.ycombinator.com/item?id=8903642"&gt;Hacker News&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://redd.it/2spolb"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://plus.google.com/110373111919831686916/posts/AMTf34fAzTs"&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="pycharm"></category><category term="python"></category><category term="ide"></category><category term="series"></category><category term="pycharm-the-good-parts"></category></entry><entry><title>Making a Static Blog with Pelican</title><link href="http://nafiulis.me/making-a-static-blog-with-pelican.html" rel="alternate"></link><published>2015-01-06T14:51:00+06:00</published><updated>2015-01-06T14:51:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2015-01-06:making-a-static-blog-with-pelican.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#getting-started" id="id15"&gt;Getting Started&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#installing-pelican" id="id16"&gt;Installing Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#basic-setup" id="id17"&gt;Basic Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#your-first-post" id="id18"&gt;Your First Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#automation" id="id19"&gt;Automation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#vanilla-python" id="id20"&gt;Vanilla Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#fabric" id="id21"&gt;Fabric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#fabric-alternatives" id="id22"&gt;Fabric alternatives&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#themes" id="id23"&gt;Themes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#using-a-theme" id="id24"&gt;Using a Theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#creating-themes" id="id25"&gt;Creating Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#settings" id="id26"&gt;Settings&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-two-settings-files" id="id27"&gt;The Two Settings Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#how-settings-work" id="id28"&gt;How Settings Work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#writing-content" id="id29"&gt;Writing Content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#previewing-content" id="id30"&gt;Previewing Content&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#devserver" id="id31"&gt;devserver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#livereload" id="id32"&gt;livereload&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#plugins" id="id33"&gt;Plugins&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#using-plugins" id="id34"&gt;Using Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#creating-plugins" id="id35"&gt;Creating Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#hosting-on-github-pages" id="id36"&gt;Hosting on Github Pages&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#creating-the-repo" id="id37"&gt;Creating the repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#ghp-import" id="id38"&gt;ghp-import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#custom-domains" id="id39"&gt;Custom domains&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#automating-publication" id="id40"&gt;Automating Publication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#acknowledgements" id="id41"&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Pelican allows you to create a static blog. Most blog sites on the web are &lt;em&gt;dynamic&lt;/em&gt; in the sense that the content of
the site live in a database. In order to view a post on a blog, the server has to &lt;em&gt;query&lt;/em&gt; the database, get the
right content and then &lt;em&gt;convert&lt;/em&gt; it into presentable HTML. However, in a static site, every page is pre-rendered
by the static blog generator. This means that your &lt;em&gt;entire&lt;/em&gt; blog can be uploaded to a server.&lt;/p&gt;
&lt;p&gt;Here's a non-exhaustive list of why a static blog generator is good:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;Cheap Scaling&lt;/em&gt;: Pre-rendered static files can stand the onslaught of traffic if your
post makes it to the top of hackernews or reddit very cheaply. No queries are being made.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Any format&lt;/em&gt;: You can use reStructuredText, Markdown etc. to write your posts.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Host Anywhere&lt;/em&gt;: Static sites can be hosted easily on github pages, Amazon S3 and even dropbox.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Own Everything&lt;/em&gt;: You have access to all your posts and all your themes. No company in the middle, just you and
your content.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Control&lt;/em&gt;: Static site generators give you a lot of control over pretty much every aspect of your
site through templates and plugins, allowing you to quickly add complex functionality not found in popular
web blogging platforms.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Update Issues&lt;/em&gt;: If you are using wordpress, you &lt;em&gt;have&lt;/em&gt; to update your software when a new version comes out; otherwise,
you have a security risk. However, one can use the same version of a static blog generator indefinitely.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's why pelican is a good choice in contrast with other generators: &lt;a class="footnote-reference" href="#assumingpy" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;Plugins&lt;/em&gt;: Pelican has a lot of plugins, that allow you to quickly add functionality.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Hackable&lt;/em&gt;: Extending pelican as well as altering its behaviour is simple.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Themes&lt;/em&gt;: Pelican has &lt;em&gt;a lot&lt;/em&gt; of themes, and you can make your own.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Multi-platform&lt;/em&gt;: Works well on Windows, OSX and Linux. &lt;a class="footnote-reference" href="#windows" id="id2"&gt;[2]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I've been using Pelican as my static blog generator for the past year. Over this time,
I have come to recognize its strengths and weaknesses. Pelican allows you to quickly get a themed site up and
running in a matter of minutes. You can also choose to invest more time and create your own theme. In short, if you want
a low hassle setup, its there and if you want a more custom site you can have that too.&lt;/p&gt;
&lt;p&gt;However, Pelican's initial setup barely scratches the surface of what's possible with this small yet powerful blog
generator. It has many plugins too for quickly adding extra functionality, like the support of other
document formats; &lt;code&gt;ipynb&lt;/code&gt; and &lt;code&gt;asciidoc&lt;/code&gt; for example. Plugins also allow you to support things
like MathJax in your pages and embed disqus comments. &lt;a class="footnote-reference" href="#id13" id="id3"&gt;[3]&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Getting Started&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before diving in, I expect you to know a few basic things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to use git&lt;/li&gt;
&lt;li&gt;How to use bash or your shell of choice&lt;/li&gt;
&lt;li&gt;How to use Python&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="installing-pelican"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;Installing Pelican&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Installation is very simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Feel free to use virtualenv if you want to but its not required.&lt;/p&gt;
&lt;p&gt;Pelican works with both Python 2 and Python 3. However, I chose to use Python 2 because I use an automation tool called
Fabric, which only supports python 2 (for the time being).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="basic-setup"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;Basic Setup&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When first beginning with pelican, one can choose to use the pelican skeleton generator to create a basic structure
using &lt;code&gt;pelican-quickstart&lt;/code&gt;. &lt;a class="footnote-reference" href="#problemsquickstart" id="id4"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pelican-quickstart
Welcome to pelican-quickstart v3.5.0.

This script will &lt;span class="nb"&gt;help&lt;/span&gt; you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt; What will be the title of this web site? Test Site
&amp;gt; Who will be the author of this web site? Kevin Kevinson
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to &lt;span class="nb"&gt;enable&lt;/span&gt; article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
Done. Your new project is available at /Users/quazinafiulislam/Desktop/testingzone
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There's no need to change much in the default quickstart wizard. Default values are indicated by &lt;code&gt;[default]&lt;/code&gt;
and &lt;code&gt;(y/N)&lt;/code&gt;, where the capitalized letter is the default value. Just one thing to note here is URL prefix; don't
set it right now, set it when you actually want to take your site online, and we will go over how to do that later
in this tutorial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="your-first-post"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;Your First Post&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After &lt;code&gt;pelican-quickstart&lt;/code&gt; is done, this is what the directory should look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── Makefile
├── content/
├── develop_server.sh
├── fabfile.py
├── output/
├── pelicanconf.py
└── publishconf.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pelican supports reStructuredText out of the box. If you want to use another format like markdown then just install it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install markdown
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More uncommon formats will be discussed later. With this out of the way, we can create our first post inside the
content folder. All our writing has to be inside the &lt;code&gt;content&lt;/code&gt; folder, so we change our directory to the
&lt;code&gt;content&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My file is called &lt;code&gt;first_post.rst&lt;/code&gt; and it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;first_post&lt;/span&gt;
&lt;span class="gh"&gt;##########&lt;/span&gt;

&lt;span class="nc"&gt;:date:&lt;/span&gt; &lt;span class="nf"&gt;2014-12-13 18:32&lt;/span&gt;
&lt;span class="nc"&gt;:category:&lt;/span&gt; &lt;span class="nf"&gt;Test&lt;/span&gt;

Hello World from Pelican!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, all one needs is a category and a date. A markdown version of the same post would be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: first_post
Date: 2014-12-13 18:32
Category: Test

Hello world from Pelican!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is what my project directory looks like now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── Makefile
├── content
│   └── first_post.rst
├── develop_server.sh
├── fabfile.py
├── pelicanconf.py
├── pelicanconf.pyc
└── publishconf.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now changing back to our project directory, we can start the development server, and see the generated blog post:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make devserver
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this is done, we should be able to see our post on &lt;code&gt;localhost:8000&lt;/code&gt;:&lt;/p&gt;
&lt;img alt="Our First post with pelican" class="align-center" src="/images/pelican_05.png" /&gt;
&lt;p&gt;We can stop the server through:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make stopserver
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="automation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;Automation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Although only a title, date and category are required for a post, pelican allows you to add a lot more information like
tags, authors and much more. However, creating a new file with the right date and time can be time consuming,
so we can use certain tools to automate the task for us.&lt;/p&gt;
&lt;div class="section" id="vanilla-python"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;Vanilla Python&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We can create simple scripts to automatically create our
entries with the right date and time. Here is an example script that I use called &lt;code&gt;make_entry.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;

&lt;span class="n"&gt;TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;{title}&lt;/span&gt;
&lt;span class="s2"&gt;{hashes}&lt;/span&gt;

&lt;span class="s2"&gt;:date: {year}-{month}-{day} {hour}:{minute:02d}&lt;/span&gt;
&lt;span class="s2"&gt;:tags:&lt;/span&gt;
&lt;span class="s2"&gt;:category:&lt;/span&gt;
&lt;span class="s2"&gt;:slug: {slug}&lt;/span&gt;
&lt;span class="s2"&gt;:summary:&lt;/span&gt;
&lt;span class="s2"&gt;:status: draft&lt;/span&gt;


&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f_create&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;content/{}_{:0&amp;gt;2}_{:0&amp;gt;2}_{}.rst&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TEMPLATE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;hashes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f_create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;File created -&amp;gt; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f_create&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;make_entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;No title given&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this, making a new file can be created like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ python make_entry.py &lt;span class="s2"&gt;&amp;quot;New Post&amp;quot;&lt;/span&gt;
File created -&amp;gt; content/2014_12_13_new-post.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="fabric"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id21"&gt;Fabric&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Jump to the next section if you're not using Python 2&lt;/em&gt; &lt;a class="footnote-reference" href="#fabpy3support" id="id5"&gt;[5]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Using Vanilla Python is great, but imagine trying to make a script for &lt;em&gt;every single&lt;/em&gt; task you need done. This would
be a nightmare. Of course, one can keep using if-else statements to add more argument parameters but that is tiring
and not very flexible (not to mention error prone). This is why one option to making scripts that can take in
different parameters is to use a handy library called &lt;a class="reference external" href="http://www.fabfile.org/"&gt;Fabric&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I use fabric for most of my tooling, since pelican already generates a &lt;code&gt;fabfile.py&lt;/code&gt;. Getting a new
command line function in fabric is very easy:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If you don't have a &lt;code&gt;fabfile.py&lt;/code&gt;, create one.&lt;/li&gt;
&lt;li&gt;Create a new function inside &lt;code&gt;fabfile.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run the function like so: &lt;code&gt;fab do_something&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the function has positional arguments, &lt;code&gt;fab do_something:True, False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the function has optional keyword arguments &lt;code&gt;fab do_something:kill_p=True, be_happy=False&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Installing Fabric is easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install Fabric
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The body of the function to make an entry is the same as before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# TEMPLATE is declared before hand, and all the necessary imports made&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f_create&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;content/{}_{:0&amp;gt;2}_{:0&amp;gt;2}_{}.rst&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TEMPLATE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;hashes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f_create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;File created -&amp;gt; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f_create&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, this time we can call it like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ fab make_entry:&lt;span class="s2"&gt;&amp;quot;New Post&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="fabric-alternatives"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;Fabric alternatives&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are tonnes of alternatives that allow you to make a simple command line interface quickly:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://click.pocoo.org/3/"&gt;Click&lt;/a&gt; : A simple to use CLI by Armin Ronacher.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/willyg302/clip.py"&gt;Clip&lt;/a&gt; : Like click, but newer, and has more features&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/argparse.html"&gt;Argparse&lt;/a&gt; : This package comes with python by default. Its not
the easiest to use package out there, but if you don't want to install a new package, then this should work fine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All three work with python 3.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="themes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;Themes&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="using-a-theme"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;Using a Theme&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pelican has many themes to choose from its &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;themes repository&lt;/a&gt;. These
are the steps:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Clone a theme repo, or if you want clone the entire &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;themes repository&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Inside &lt;code&gt;pelicancon.py&lt;/code&gt; file, change the &lt;code&gt;THEME&lt;/code&gt; variable, to the directory
of your theme.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On a side note, if you're looking for a place where you can view a screenshot of all the different themes,
&lt;a class="reference external" href="http://ptd.pronoiac.org/"&gt;this&lt;/a&gt; site has nice screen-shots of each.&lt;/p&gt;
&lt;p&gt;For example, if you wanted to use the &lt;a class="reference external" href="https://github.com/kplaube/maggner-pelican"&gt;maggner-pelican&lt;/a&gt; theme:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Clone it into your project directory, &lt;code&gt;git clone https://github.com/kplaube/maggner-pelican.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change the &lt;code&gt;THEME&lt;/code&gt; variable to &lt;code&gt;'maggner-pelican'&lt;/code&gt; and you're done :)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-themes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;Creating Themes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Creating themes in Pelican is well documented in their documentation about &lt;a class="reference external" href="http://docs.getpelican.com/en/3.5.0/themes.html"&gt;theme creation&lt;/a&gt;. Although creating themes
is beyond the scope of this post (because there's a lot that could be said), here are a few pointers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Target one format, if you try to create a theme for multiple formats like both rst and md, you're doing to run
into a lot of issues.&lt;/li&gt;
&lt;li&gt;Using preprocessors can be more effective than using raw css since they allow you create a single css file and provides
you with a lot more flexibility.&lt;/li&gt;
&lt;li&gt;If you wish to embed disqus or google comments or other third party dynamic content, then I suggest that you use
separate include files instead of plugins.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="settings"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id26"&gt;Settings&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="the-two-settings-files"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;The Two Settings Files&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By default, pelican comes with both a &lt;code&gt;pelicanconf.py&lt;/code&gt; and &lt;code&gt;publishconf.py&lt;/code&gt;. When you are writing content
and wish to see a preview, the settings in &lt;code&gt;pelicanconf.py&lt;/code&gt; are used. When you choose to publish, for example to
github or some other place, the settings in &lt;code&gt;pelicanconf.py&lt;/code&gt; and &lt;code&gt;publishconf.py&lt;/code&gt; are used as
&lt;code&gt;pelicanconf.py&lt;/code&gt; is imported in &lt;code class="coderef"&gt;1&lt;/code&gt; below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="c1"&gt;# This file is only used if you use `make publish` or&lt;/span&gt;
&lt;span class="c1"&gt;# explicitly specify it as your config file.&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curdir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelicanconf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="c1"&gt;# 1&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-settings-work"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id28"&gt;How Settings Work&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By convention all settings are capitalized:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Nafiul Islam&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fUNNY bLOG&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we take a look in the default theme, they are used like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;article.status&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;draft&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;h2&amp;gt;Comments !&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;div id=&amp;quot;disqus_thread&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;var disqus_shortname = &amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;#39;;&lt;/span&gt;
&lt;span class="x"&gt;var disqus_identifier = &amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;#39;;&lt;/span&gt;
&lt;span class="x"&gt;var disqus_url = &amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;#39;;&lt;/span&gt;
&lt;span class="x"&gt;(function() {&lt;/span&gt;
&lt;span class="x"&gt;var dsq = document.createElement(&amp;#39;script&amp;#39;); dsq.type = &amp;#39;text/javascript&amp;#39;; dsq.async = true;&lt;/span&gt;
&lt;span class="x"&gt;(...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;SITEURL&lt;/code&gt; AND &lt;code&gt;DISQUS_SITENAME&lt;/code&gt; are both settings that are described in either &lt;code&gt;pelicanconf.py&lt;/code&gt;
or &lt;code&gt;publishconf.py&lt;/code&gt;. They appear as variables inside the jinja template. &lt;a class="footnote-reference" href="#notmyideaarticlehtml" id="id6"&gt;[6]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Most settings that we put into our settings files are used in the theme, however, some settings like
&lt;code&gt;DEFAULT_PAGINATION&lt;/code&gt; are used to determine other things.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-content"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id29"&gt;Writing Content&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pelican supports reStructuredText as its default document format. However, there is also support for markdown, ipython
notebook, asciidoc and probably much more. To write in any of these formats, one needs to install the plugin associated
with the file extension, such as &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/tree/master/asciidoc_reader"&gt;asciidoc_reader&lt;/a&gt;
for the asciidoc format and &lt;a class="reference external" href="https://github.com/danielfrg/pelican-ipynb"&gt;pelican-ipynb&lt;/a&gt; for the ipython notebook
format. &lt;a class="footnote-reference" href="#notallpluginsarefound" id="id7"&gt;[7]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I would suggest reStructuredText, since it has the most features and can
offer many ways to extend the syntax with features such as directives and interpreted roles. For example, reStructuredText
supports footnotes out of the box, whereas if one were to use markdown, one would need to install a separate plugin and
attach it to pelican. &lt;a class="footnote-reference" href="#footnotesrst" id="id8"&gt;[8]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, pelican has many third party plugins for markdown documents as well so if you prefer using markdown, then
please do so, I only recommend reStructuredText because its easy to extend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="previewing-content"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id30"&gt;Previewing Content&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="devserver"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id31"&gt;devserver&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The default way to see a preview of the generated blog is to use &lt;code&gt;make devserver&lt;/code&gt;, this regenerates your blog
every time that you change your &lt;code&gt;content&lt;/code&gt; folder. This option is a horrible way to preview your blog for a couple
of reasons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You need to hit the refresh button in your browser to see the changes after a save. This can often get tiring.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make devserver&lt;/code&gt; runs two processes in background for no good reason, the processes log data into the console
anyways, so why not just have a tool that generates your content and terminates when you hit &lt;kbd class="light"&gt;ctrl&lt;/kbd&gt; + &lt;kbd class="light"&gt;C&lt;/kbd&gt; ?&lt;/li&gt;
&lt;li&gt;Furthermore, in the transformation from your chosen format to html, if you hit an error, the daemon that keeps
transforming your files to html also stops, and the error is often buried deep inside the logs&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="livereload"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id32"&gt;livereload&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We need a solution that does two things for us:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Allows us to see live previews on each save without having to refresh the browser.&lt;/li&gt;
&lt;li&gt;Does not stop unexpectedly from an error.&lt;/li&gt;
&lt;li&gt;Has an easy to use CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The solution is to use a neat little package called &lt;code&gt;livereload&lt;/code&gt; and can be installed through:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install livereload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this has been installed, we need to install the livereload plugin for our respective browser. For example in chrome:&lt;/p&gt;
&lt;img alt="Searching for the livereload extension" class="align-center" src="/images/pelican_01.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Installing the right plugin" class="align-center" src="/images/pelican_02.png" /&gt;
&lt;p&gt;In firefox, we head over to addons.mozilla.org and search for &lt;code&gt;livereload&lt;/code&gt;:&lt;/p&gt;
&lt;img alt="Installing on Firefox" class="align-center" src="/images/pelican_03.png" /&gt;
&lt;p&gt;Once this has been installed, we need to run the livereload server. I do this by adding an extra function to my &lt;code&gt;fabfile.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;livereload&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;live_build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;make clean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 1&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;make html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 2&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;output&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;livereload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 4&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../content/*.rst&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 5&lt;/span&gt;
        &lt;span class="n"&gt;livereload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pelican -s ../pelicanconf.py -o ../output&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 6&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../naffy/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 7&lt;/span&gt;
        &lt;span class="n"&gt;livereload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pelican -s ../pelicanconf.py -o ../output&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 8&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 9&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*.css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 10&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;liveport&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;35729&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have a lot to explain here so lets begin with &lt;code class="coderef"&gt;1&lt;/code&gt; and &lt;code class="coderef"&gt;2&lt;/code&gt;. In both &lt;code class="coderef"&gt;1&lt;/code&gt; and &lt;code class="coderef"&gt;2&lt;/code&gt;, we use the &lt;code&gt;local&lt;/code&gt; function
from fabric. &lt;code&gt;local&lt;/code&gt; allows us to run shell commands like &lt;code&gt;cd&lt;/code&gt;. In this case, we are using the &lt;code&gt;make&lt;/code&gt;
command because pelican comes with a Makefile. If we involve &lt;code&gt;make help&lt;/code&gt; from the command line in our project
directory, we get the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make &lt;span class="nb"&gt;help&lt;/span&gt;
Makefile &lt;span class="k"&gt;for&lt;/span&gt; a pelican Web site

Usage:
   make html                        &lt;span class="o"&gt;(&lt;/span&gt;re&lt;span class="o"&gt;)&lt;/span&gt;generate the web site
   make clean                       remove the generated files
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, in &lt;code class="coderef"&gt;1&lt;/code&gt; we clean out output folder, and in &lt;code class="coderef"&gt;2&lt;/code&gt; we generate our html files from our content.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;3&lt;/code&gt;, we change the directory to our newly created output folder and in &lt;code class="coderef"&gt;4&lt;/code&gt; we create an instance
of the &lt;code&gt;livereload&lt;/code&gt; server. In &lt;code class="coderef"&gt;5&lt;/code&gt;, we use the &lt;code&gt;server.watch&lt;/code&gt; function to watch all the &lt;code&gt;rst&lt;/code&gt; files
since my content is written in reStructuredText. We can change this to &lt;code&gt;../content/*.md&lt;/code&gt; for markdown files for
example.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;server.watch&lt;/code&gt; had one required argument and two optional arguments. The first argument is &lt;code&gt;filepath&lt;/code&gt;,
the second is &lt;code&gt;func&lt;/code&gt;, a function that you run every time watched files are changed.
The last argument is &lt;code&gt;delay&lt;/code&gt;, which delays function execution. &lt;a class="footnote-reference" href="#id14" id="id9"&gt;[9]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;6&lt;/code&gt;, we specify the function to be run as &lt;code&gt;livereload.shell('pelican -s ../pelicanconf.py -o ../output')&lt;/code&gt;.
The &lt;code&gt;shell&lt;/code&gt; function from &lt;code&gt;livereload&lt;/code&gt; allows us to run shell functions every time a watched file is changed.
In this case, we ask pelican to remake our html files. Why was &lt;code&gt;make html&lt;/code&gt; not used here? This is because the
&lt;code&gt;make&lt;/code&gt; command looks for a Makefile and we are right now in our output directory.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;7&lt;/code&gt;, the server is directed to watch the &amp;quot;naffy&amp;quot; directory. The &amp;quot;naffy&amp;quot; directory is the directory that
houses my theme; if any change is made to my theme, livereload refreshes the server. Replace &amp;quot;naffy&amp;quot; with whatever
folder you are housing your theme in. If you're using the default theme, then do not add &lt;code class="coderef"&gt;7&lt;/code&gt; and &lt;code class="coderef"&gt;8&lt;/code&gt;. &lt;code class="coderef"&gt;8&lt;/code&gt; is the
same as &lt;code class="coderef"&gt;6&lt;/code&gt;, we just rebuild the html.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;9&lt;/code&gt; and &lt;code class="coderef"&gt;10&lt;/code&gt;, the server is further instructed to watch html and css files that change within the output directory.&lt;/p&gt;
&lt;p&gt;Finally in &lt;code class="coderef"&gt;11&lt;/code&gt;, we tell livereload to serve on port &lt;code&gt;35729&lt;/code&gt;. This is the default port for the livereload plugin &lt;a class="footnote-reference" href="#chromedoesntwork" id="id10"&gt;[10]&lt;/a&gt;.
The &lt;code&gt;port&lt;/code&gt; variable is the port of the server serving the files, the &lt;code&gt;liveport&lt;/code&gt; variable is a port that
livereload uses to make changes directly to the HTML file.&lt;/p&gt;
&lt;img alt="Livereload plugin preferences on FireFox" class="align-center" src="/images/pelican_04.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="plugins"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id33"&gt;Plugins&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="using-plugins"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id34"&gt;Using Plugins&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Most plugins in pelican tell you how to install them. For example, the &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/tree/master/render_math"&gt;render_math&lt;/a&gt; plugin allows you to embed math
inside your posts. Here's the basic gist of what you need to do in order to install them:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Download the plugin package into your plugins folder, which is set inside your &lt;code&gt;pelicanconf.py&lt;/code&gt; file in the
&lt;code&gt;PLUGIN_PATHS&lt;/code&gt; variable.&lt;/li&gt;
&lt;li&gt;Then append the name of your plugin package inside your &lt;code&gt;pelicanconf.py&lt;/code&gt; file. &lt;a class="footnote-reference" href="#settingspy" id="id11"&gt;[11]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow any other additional instructions that your plugin might have.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If just adding the name does not work, then one might consider adding &lt;code&gt;&amp;lt;plugin_name&amp;gt;.&amp;lt;plugin_file&amp;gt;&lt;/code&gt;. &lt;a class="footnote-reference" href="#pluginsimport" id="id12"&gt;[12]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-plugins"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id35"&gt;Creating Plugins&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Creating plugins in pelican basically means that you create a function to do your processing. You then register that
function as a plugin. Creating plugins is
&lt;a class="reference external" href="http://docs.getpelican.com/en/latest/plugins.html#how-to-create-plugins"&gt;well documented&lt;/a&gt; and an example of creating
a reader is given.&lt;/p&gt;
&lt;p&gt;In my use of pelican, more often than not, I've needed to create plugins that are process text in a given document, not
add support for new document formats. So, I'll show you how I created a plugin for adding keyboard keys like &lt;kbd class="light"&gt;alt&lt;/kbd&gt;
and &lt;kbd class="light"&gt;⌘&lt;/kbd&gt; .&lt;/p&gt;
&lt;p&gt;I like to create my plugins as packages, but you can create them as simple files as well. So, inside our plugins folder,
create a new package, and inside the package, we create a new file for the plugin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; plugins  &lt;span class="c1"&gt;# Or whatever your plugins folder is called&lt;/span&gt;
$ mkdir keyboard
$ &lt;span class="nb"&gt;cd&lt;/span&gt; keyboard
$ touch __init__.py kb.py
$ ls
__init__.py kb.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside &lt;code&gt;kb.py&lt;/code&gt;, we can need a function that modifies existing code, and a function that registers the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelican&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;content_object_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Provides the key plugin, make sure that you have Keys.css, http://michaelhue.com/keyscss/&lt;/span&gt;
&lt;span class="sd"&gt;    imported inside your HTML. How to use:&lt;/span&gt;

&lt;span class="sd"&gt;        So you hit [kb:CTRL] + [kb:ALT] + [kb:DEL] when in doubt&lt;/span&gt;

&lt;span class="sd"&gt;    Note, that light keyboard keys are enabled by default.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_content&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# 1&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_content&lt;/span&gt;
        &lt;span class="n"&gt;new_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\[kb:(.+?)\]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;kbd class=&amp;quot;light&amp;quot;&amp;gt;\1&amp;lt;/kbd&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 2&lt;/span&gt;
        &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_content&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_object_init&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_object_init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;1&lt;/code&gt;, we check if the article, page or blog post in question has content; essentially does it have a body. If we
don't have a body, then we skip this object. In &lt;code class="coderef"&gt;2&lt;/code&gt;, replace  with the corresponding stylized version, so that typing
&lt;code&gt;[kb:alt]&lt;/code&gt; will give you &lt;kbd class="light"&gt;alt&lt;/kbd&gt; .&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;3&lt;/code&gt;, we register the function with pelican. Registering this plugin is simple, inside &lt;code&gt;pelicanconf.py&lt;/code&gt;, we
merely append to the list of &lt;code&gt;PLUGINS&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;keyboard.kb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I used &lt;a class="reference external" href="http://michaelhue.com/keyscss/"&gt;key.css&lt;/a&gt; to style my keys, and I simply added the css file to my theme's
&lt;code&gt;article.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once can create far more interesting plugins than the one I've shown, by looking at the plugin repository for
more interesting plugins or even reading the documentation (although its not exhaustive in its explanations).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hosting-on-github-pages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id36"&gt;Hosting on Github Pages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Github is the best way to host your static blog. Some notable sites which get a substantial amount of traffic are
hosted on github like &lt;a class="reference external" href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;, &lt;a class="reference external" href="http://yeoman.io/"&gt;Yeoman&lt;/a&gt;,
&lt;a class="reference external" href="https://jakevdp.github.io/"&gt;Pythonic Perambulations&lt;/a&gt; are hosted on github pages. If you don't have a github
account, creating one is simple and quick.&lt;/p&gt;
&lt;div class="section" id="creating-the-repo"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id37"&gt;Creating the repo&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In order to get a site name like &lt;code&gt;username.github.io&lt;/code&gt;, one needs to create a repo with that name on github,
set the visibility to public and do not initialize with anything, you want an empty repo that you can push to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ghp-import"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id38"&gt;ghp-import&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ghp-import&lt;/code&gt; is a simple plugin that allows you to easily push your content to a github repo. You can install it
using pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install ghp-import
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are two steps to doing this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ghp-import output
$ git push git@github.com:&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io.git gh-pages:master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will push the files in your &lt;code&gt;output&lt;/code&gt; folder directly to the master branch of the &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;
repository. It may take some time initially, but you will be able to see your fully generated blog on this domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="custom-domains"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id39"&gt;Custom domains&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In order to get your own top level domain like I have with &lt;code&gt;nafiulis.me&lt;/code&gt;, you simply need to add a &lt;code&gt;CNAME&lt;/code&gt;
file with your domain. The &lt;code&gt;CNAME&lt;/code&gt; file must me located &lt;em&gt;inside&lt;/em&gt; your output directory and must only have the
domain name. My &lt;code&gt;CNAME&lt;/code&gt; file looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nafiulis.me
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;CNAME&lt;/code&gt; file must be included when you are pushing to your github repo.&lt;/p&gt;
&lt;p&gt;Once this is done, you need to link your domain up with github, and this is wonderfully explained in this
&lt;a class="reference external" href="http://davidensinger.com/2013/03/setting-the-dns-for-github-pages-on-namecheap/"&gt;article&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="automating-publication"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id40"&gt;Automating Publication&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I use fabric to automate my publication, I just have two functions to do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enter_dns_file&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  &lt;span class="c1"&gt;# 1&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;output/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nafiulis.me&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;github&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;publish_drafts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# 2&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;output/drafts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;publish_drafts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rm -rf output/drafts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ghp-import output&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 4&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git push&amp;#39;&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;git@github.com:&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io.git&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;gh-pages:master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 5&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rm -rf output&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;1&lt;/code&gt;, the function &lt;code&gt;enter_dns_file&lt;/code&gt; is used to insert the &lt;code&gt;CNAME&lt;/code&gt; file into the output folder before
pushing to github because in &lt;code class="coderef"&gt;6&lt;/code&gt;, we delete the entire output folder.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;2&lt;/code&gt;, the &lt;code&gt;github&lt;/code&gt; function is used to publish the content of the output folder to our github repo, with the
option of publishing drafts which is &lt;code&gt;False&lt;/code&gt; by default. The &lt;code&gt;try-catch&lt;/code&gt; block in &lt;code class="coderef"&gt;3&lt;/code&gt; is there to check if
we have any drafts in the first place, and if the &lt;code&gt;publish_drafts&lt;/code&gt; variable is &lt;code&gt;True&lt;/code&gt;, then we publish them.&lt;/p&gt;
&lt;p&gt;From &lt;code class="coderef"&gt;4&lt;/code&gt; to &lt;code class="coderef"&gt;5&lt;/code&gt;, we push the content to the repository. Replace &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; with your username.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="acknowledgements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id41"&gt;Acknowledgements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I would like to thank &lt;strong&gt;Ashwini Chaudhury&lt;/strong&gt;, &lt;strong&gt;Karan Sikka&lt;/strong&gt;, &lt;strong&gt;Mahmud Ridwan&lt;/strong&gt;, &lt;strong&gt;Sahib bin Mahboob&lt;/strong&gt; and
&lt;strong&gt;Keiron Pizzey&lt;/strong&gt; for proofreading this article before publication.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="assumingpy" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Assuming that you are proficient in Python.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="windows" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Don't use virtualenv, just use your base python when using windows. If using Windows,
make sure that you have 2.7.9 or 3.4.2, both of which have &amp;quot;ensurepip&amp;quot;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;div class="first last line-block"&gt;
&lt;div class="line"&gt;Pelican has its own plugin repository on github. Please note however, that some plugins are defunct and are not supported by newer versions of pelican.&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;https://github.com/getpelican/pelican-plugins&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="problemsquickstart" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If you cannot access this, restart your virtualenv if you are currently in one. Otherwise use restart your shell.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="fabpy3support" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;div class="first last line-block"&gt;
&lt;div class="line"&gt;Check out the wall of superpowers if this has changed&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://python3wos.appspot.com/"&gt;http://python3wos.appspot.com/&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="notmyideaarticlehtml" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;div class="first last line-block"&gt;
&lt;div class="line"&gt;This piece of code is taken from the default theme that comes with pelican called &amp;quot;notmyidea&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://github.com/getpelican/pelican/blob/3.5.0/pelican/themes/notmyidea/templates/article.html#L17"&gt;https://github.com/getpelican/pelican/blob/3.5.0/pelican/themes/notmyidea/templates/article.html#L17&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="notallpluginsarefound" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The ipython notebook plugin is one example of a plugin that you can't find on the official plugin
repository. This may be, because the plugin does not support the newest version, Pelican 3.5, since
the plugin says that it required pelican 3.4 to function.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnotesrst" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;div class="first last line-block"&gt;
&lt;div class="line"&gt;reStructuredText also allows for more versatile footnotes as well. &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/rst/quickstart.html"&gt;Check out their quickstart guide&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id9"&gt;[9]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://livereload.readthedocs.org/en/latest/#shell"&gt;Livereload has documentation on the server class on its documentation website&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="chromedoesntwork" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id10"&gt;[10]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I cannot find the same options for chrome, hence I use firefox to see live builds of the generated site&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="settingspy" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id11"&gt;[11]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;In some documentation regarding plugins, the pelicanconf.py file is called settings.py.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="pluginsimport" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id12"&gt;[12]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Sometimes, Pelican packages do not import the functions necessary inside their &lt;code&gt;__init__.py&lt;/code&gt;
file. In this case you import one of the plugins's files. In most cases it is the file with a
&lt;code&gt;register&lt;/code&gt; method.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="pelican"></category><category term="static-blog-generator"></category></entry><entry><title>Kotlin Koans I - The Beginning</title><link href="http://nafiulis.me/kotlin-koans-i.html" rel="alternate"></link><published>2014-11-22T21:32:00+06:00</published><updated>2014-11-22T21:32:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2014-11-22:kotlin-koans-i.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#getting-started" id="id10"&gt;Getting Started&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#installing-kotlin" id="id11"&gt;Installing Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#hello-world-in-intellij-idea" id="id12"&gt;Hello World in IntelliJ IDEA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#dash-doctests" id="id13"&gt;Dash doctests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#cloning-the-koans" id="id14"&gt;Cloning the Koans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#koans-part-i-introduction" id="id15"&gt;Koans Part I: Introduction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#functions" id="id16"&gt;0: Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#collection-to-string" id="id17"&gt;1: Collection to String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#default-parameters" id="id18"&gt;2.1: Default Parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#collections-functions" id="id19"&gt;2.2: Collections functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#lambdas" id="id20"&gt;3: Lambdas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#string-templates" id="id21"&gt;4: String templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#null-safety" id="id22"&gt;5: Null safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#smart-casts-recursion" id="id23"&gt;6: Smart Casts &amp;amp; Recursion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#data-classes" id="id24"&gt;7: Data Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#extension-functions" id="id25"&gt;8: Extension functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#extending-collections" id="id26"&gt;9: Extending Collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#object-expressions" id="id27"&gt;10: Object Expressions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#takeaway" id="id28"&gt;Takeaway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#acknowledgements" id="id29"&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Kotlin is a programming language created by Jetbrains. It runs on both the Java Virtual Machine (JVM)
and can be compiled to JavaScript.&lt;/p&gt;
&lt;p&gt;I've been meaning to try out Kotlin for quite some time. After my foray into &lt;a class="reference external" href="http://www.scala-lang.org/"&gt;Scala&lt;/a&gt;,
which brought some very dramatic changes to the Java universe, my interest in JVM based languages was re-invigorated.&lt;/p&gt;
&lt;p&gt;Back in 2013, Kotlin seemed like an interesting language because Jetbrains, a heavy investor in the JVM, was promoting it
as an &lt;em&gt;industry first&lt;/em&gt; programming language. I knew Kotlin also was going to have &lt;em&gt;excellent&lt;/em&gt; tooling support,
because after all Jetbrains is an IDE company. It wasn't until recently that Kotlin had a tutorial series called the
&lt;a class="reference external" href="http://kotlinlang.org/docs/tutorials/koans.html"&gt;Kotlin Koans&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So why should you learn Kotlin? Well that is what I will be trying to answer throughout this series. We will
go through the Kotlin Koans, and find out the differences between Java and Kotlin as well as other languages,
but in short &lt;a class="footnote-reference" href="#mistake" id="id1"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No semicolons&lt;/li&gt;
&lt;li&gt;First class functions, meaning they do not need to be declared &lt;em&gt;within&lt;/em&gt; classes&lt;/li&gt;
&lt;li&gt;Lambdas&lt;/li&gt;
&lt;li&gt;An awesome collections library&lt;/li&gt;
&lt;li&gt;Small runtime&lt;/li&gt;
&lt;li&gt;data classes, like &lt;code&gt;case&lt;/code&gt; classes in Scala&lt;/li&gt;
&lt;li&gt;Good interoperability with existing Java code&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Getting Started&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="installing-kotlin"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Installing Kotlin&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The simplest way to install Kotlin is to download &lt;a class="reference external" href="https://www.jetbrains.com/idea/download/"&gt;IntelliJ IDEA&lt;/a&gt;.
The community edition supports Kotlin so you can go ahead and download it. After this, we can install the Kotlin plugin,
which will automatically install the Kotlin runtime as well:&lt;/p&gt;
&lt;img alt="Installing the plugin. The steps are indicated by the numbering." class="align-center" src="/images/koans_04.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-world-in-intellij-idea"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Hello World in IntelliJ IDEA&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once this has been installed, getting started with your first hello world project is simple. Hadi Hariri &lt;a class="footnote-reference" href="#hadi" id="id2"&gt;[2]&lt;/a&gt;
has created a bunch of videos on &lt;a class="reference external" href="http://kotlinlang.org/docs/videos.html"&gt;getting started&lt;/a&gt;. Here, he demonstrates
how to create a new Kotlin project:&lt;/p&gt;
&lt;div class="external youtube"&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/iMMBrcabSOI" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="dash-doctests"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;Dash doctests&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Kotlin also has &lt;a class="reference external" href="http://kapeli.com/dash"&gt;Dash&lt;/a&gt; &lt;a class="footnote-reference" href="#dash" id="id4"&gt;[3]&lt;/a&gt; doctests, provided by a third party:&lt;/p&gt;
&lt;img alt="Installing Kotlin doctests" class="align-center" src="/images/koans_05.png" /&gt;
&lt;p&gt;However, this merely is a copy of the online documentation available for &lt;a class="reference external" href="http://kotlinlang.org/docs/reference/"&gt;Kotlin&lt;/a&gt;,
and does not actually have a searchable API reference. The code completion in IDEA somewhat mitigates this though.
The Jetbrains team is still working on modernizing the reference for Kotlin at the moment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cloning-the-koans"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;Cloning the Koans&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next part is just cloning the Koans repository. One can just use the command line like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/jetbrains/workshop-jb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or checkout from the IDEA start menu:&lt;/p&gt;
&lt;img alt="Checking out from git" class="align-center" src="/images/koans_06.png" /&gt;
&lt;img alt="Setting the repo url" class="align-center" src="/images/koans_07.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="koans-part-i-introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Koans Part I: Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I'm going to go through all the exercises in the Koans. I will share how I solved these problems, with the challenges
I've had to face as well as examples of solutions themselves. One can merely continue reading to see a list of features
that Kotlin has, or one can follow along using the consecutive sections as an answer sheet.&lt;/p&gt;
&lt;div class="section" id="functions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;0: Functions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The goal of the Koans is to make all the tests pass. Lets head over to our first exercise:&lt;/p&gt;
&lt;img alt="Where the file is located" class="align-center" src="/images/koans_08.png" /&gt;
&lt;p&gt;Inside the file, we have &lt;tt class="docutils literal"&gt;todoTask0&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;task0&lt;/tt&gt;. &lt;code&gt;todoTask0&lt;/code&gt; gives us the information we need to complete the
task. We essentially need to make it return &lt;tt class="docutils literal"&gt;&amp;quot;OK&amp;quot;&lt;/tt&gt;. This seems easy enough:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;task0&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That was easy. We have a function here that returns a &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="collection-to-string"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;1: Collection to String&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In this task, we need to convert a given collection into a string. We are allowed to copy and paste the Java code and
transform it into Kotlin code:&lt;/p&gt;
&lt;blockquote&gt;
You can just copy-paste it and agree to automatically convert it to Kotlin - but only in this task :).&lt;/blockquote&gt;
&lt;p&gt;It is unfortunate, however, that &lt;code&gt;todoTask1&lt;/code&gt; does not give us any extra information other than telling us to just
&lt;em&gt;&amp;quot;Rewrite JavaCode1.task1 to Kotlin&amp;quot;&lt;/em&gt;. So, I decided to take a look at the test function located here:&lt;/p&gt;
&lt;img alt="Where the tests are located" class="align-center" src="/images/koans_09.png" /&gt;
&lt;p&gt;We can see that we are asked to turn the collection of numbers into a comma delimited string, with braces at the
beginning and at the end:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_01_Functions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{1, 2, 3, 42, 555}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;555&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Copying the Java code from &lt;tt class="docutils literal"&gt;JavaCode1.task1&lt;/tt&gt; results in this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;sb&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;iterator&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasNext&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;element&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasNext&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not very different from the &lt;em&gt;actual&lt;/em&gt; Java code. However, I chose to use the following function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;task1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;sj&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringJoiner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don't know if my version has worse performance than the converted Java Code, but it sure passes the test:&lt;/p&gt;
&lt;img alt="Passing test 1" class="align-center" src="/images/koans_10.png" /&gt;
&lt;p&gt;In this I chose to use Kotlin's for loop that supports collections.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="default-parameters"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;2.1: Default Parameters&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In this exercise, we need to convert an overloaded Java class into a simple Kotlin function with default parameters.
The function in question is &lt;code&gt;foo&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;todoTask2_1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At first this was confusing because it had been a long time since I had used a language that did &lt;em&gt;not&lt;/em&gt; have default
parameters. Secondly, &lt;code&gt;foo&lt;/code&gt; already seemed to have a function body. Thirdly, there seemed to be no instructions on
&lt;em&gt;what&lt;/em&gt; the function did; you seemingly &lt;em&gt;had&lt;/em&gt; to read the Java code to understand. I decided to go back to the tests again
and see what was up.&lt;/p&gt;
&lt;p&gt;We have to rewrite the function &lt;code&gt;foo&lt;/code&gt; to have three parameters:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; which is a &lt;code&gt;String&lt;/code&gt;. Required&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toUpperCase&lt;/code&gt; which is a &lt;code&gt;Boolean&lt;/code&gt; value. Optional, defaults to &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;number&lt;/code&gt; which is a &lt;code&gt;Int&lt;/code&gt;. Optional, defaults to &lt;code&gt;42&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With that out of the way, this is what I ended up with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()+&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;task2_1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;
            &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;
            &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;toUpperCase&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;
            &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;toUpperCase&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;1&lt;/code&gt; I use a ternary operator, the equivalent in a full &lt;code&gt;if-else&lt;/code&gt; statement would be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compared the above to the amount of Java code one would have to write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JavaCode2&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;JavaCode&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;defaultNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;toUpperCase&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toUpperCase&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toUpperCase&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;toUpperCase&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaultNumber&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;toUpperCase&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaultNumber&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="collections-functions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;2.2: Collections functions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In &lt;a class="reference internal" href="#collection-to-string"&gt;1: Collection to String&lt;/a&gt;, we wrote some Kotlin to turn a collection of numbers into a string, enclosed
by braces. In this exercise, we just have to use on line of code to achieve the same thing using &lt;code&gt;joinToString&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;task2_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;joinToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="lambdas"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;3: Lambdas&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This exercise essentially asks us to use lambdas to search for a value, in this case &lt;code&gt;42&lt;/code&gt; in a list of integers.
I could not find what I was looking for in the exercise file itself. For a person who is not used to Kotlin's lambda
syntax this exercise might seem a little confusing. I happened to find out how to use lambdas in Kotlin from a
&lt;a class="reference external" href="http://jamie.mccrindle.org/2013/01/exploring-kotlin-standard-library-part-1.html"&gt;blog post&lt;/a&gt;. In the beginning,
I ended up with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;task3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;42&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, we learn about Kotlin's new syntax for lambdas. One does not &lt;em&gt;have&lt;/em&gt; to use braces, but they are allowed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;task3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;42&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, a friend of mine pointed out that &lt;code&gt;map&lt;/code&gt; is not needed. Instead, &lt;code&gt;any&lt;/code&gt; &lt;a class="footnote-reference" href="#arigatou" id="id5"&gt;[4]&lt;/a&gt;
&lt;a class="footnote-reference" href="#lambdasreference" id="id6"&gt;[5]&lt;/a&gt; is a better solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;task3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;42&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But, one can go even further. Instead of declaring a lambda that takes in a parameter, one can use the implicit iterator
created, &lt;code&gt;it&lt;/code&gt; shown in &lt;code class="coderef"&gt;1&lt;/code&gt; below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;task3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ---------------------vv------------------+&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;42&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;//  1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="string-templates"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id21"&gt;4: String templates&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In this exercise, we need to make a regex to match the patterns in the tests. The regex for months is already made:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;month&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All that we need to do is use this variable inside the &lt;code&gt;task4()&lt;/code&gt; function like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//                    |||                                        |||&lt;/span&gt;
&lt;span class="c1"&gt;// -------------------vvv----------------------------------------vvv&lt;/span&gt;
&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;task4&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;(\w*) (\w*) \((\d{2}) ${month} (\d{4})\)&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Above, we stick in the month variable, we could have also used &lt;code&gt;$month&lt;/code&gt; instead of &lt;code&gt;${month}&lt;/code&gt;.
The string that we're using is triple quoted, or a multi-line string.The difference is that in a multi-line
string, special characters don't need to be escaped.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="null-safety"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;5: Null safety&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This exercise is meant to demonstrate Kotlin's safety features. We have to change the body of &lt;code&gt;sendMessageToClient&lt;/code&gt; to
do the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If &lt;code&gt;client&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;null&lt;/code&gt;, then we get its &lt;code&gt;personalInfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;personalInfo&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;null&lt;/code&gt;, then we get the &lt;code&gt;email&lt;/code&gt; from it&lt;/li&gt;
&lt;li&gt;If both &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; are &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;null&lt;/code&gt;, then we send a message using &lt;code&gt;mailer.sendMessage&lt;/code&gt;.
Otherwise, we return.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Initially, I ended up with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;sendMessageToClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="n"&gt;mailer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mailer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;personalInfo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;personalInfo&lt;/span&gt;  &lt;span class="c1"&gt;// 1&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;personalInfo&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;          &lt;span class="c1"&gt;// 2&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="c1"&gt;// 3&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use two statements, &lt;code class="coderef"&gt;1&lt;/code&gt; and &lt;code class="coderef"&gt;2&lt;/code&gt; to get the data I needed. This However, can be done in a better way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;personalInfo&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;3&lt;/code&gt;, we just have an empty &lt;code&gt;return&lt;/code&gt; statement. When a function returns nothing, it is actually returning
&lt;code&gt;Unit&lt;/code&gt;. &lt;code&gt;Unit&lt;/code&gt; is a singleton and does not have to be return explicitly &lt;a class="footnote-reference" href="#breslavunit" id="id7"&gt;[6]&lt;/a&gt;. In other words, this function
will work just fine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;sendMessageToClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="n"&gt;mailer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mailer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;personalInfo&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the end, we need &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; to use &lt;code&gt;mailer.sendMessage&lt;/code&gt;. Even in something like Python,
one would need multiple if statements to get this done, and plenty of &lt;code&gt;hasattr&lt;/code&gt; calls.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="smart-casts-recursion"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;6: Smart Casts &amp;amp; Recursion&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In this exercise, we need to write a recursive function using Kotlin's &lt;code&gt;when&lt;/code&gt; keyword. The basic gist of the problem
is that we have:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An abstract class called &lt;code&gt;Expr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A class called &lt;code&gt;Num&lt;/code&gt; that represents a number.&lt;/li&gt;
&lt;li&gt;A class called &lt;code&gt;Sum&lt;/code&gt; that represents the &lt;em&gt;sum&lt;/em&gt; of two &lt;code&gt;Num&lt;/code&gt; types.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this, we need to create a function that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Returns the &lt;em&gt;expression&lt;/em&gt; of a summation or a number. For example:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;print(Num(2))&lt;/code&gt; should return &lt;code&gt;&amp;quot;2&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print(Sum(Sum(Num(1), Num(2)), Num(3)))&lt;/code&gt; should return &lt;code&gt;&amp;quot;1 + 2 + 3&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence, if we are given a &lt;code&gt;Sum&lt;/code&gt; object, we need to call the function &lt;em&gt;again&lt;/em&gt; breaking the sum down into two parts,
the &lt;code&gt;left&lt;/code&gt; and the &lt;code&gt;right&lt;/code&gt;, as shown in &lt;code&gt;Sum&lt;/code&gt;'s function definition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Expr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that in mind, we arrive at the following function, which sadly is called &lt;code&gt;print&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Expr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// 1&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// 2&lt;/span&gt;
        &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Num&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;// 3&lt;/span&gt;
        &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; + &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// 4&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unknown expression&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// 5&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;1&lt;/code&gt; we declare the function &lt;code&gt;print&lt;/code&gt; that takes in a type of &lt;code&gt;Expr&lt;/code&gt; and returns a &lt;code&gt;String&lt;/code&gt;.
In &lt;code class="coderef"&gt;2&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt; feels like a switch statement. If &lt;code&gt;expr&lt;/code&gt; is of instance &lt;code&gt;Num&lt;/code&gt;, then we return the
value of &lt;code&gt;expr&lt;/code&gt; as a &lt;code&gt;String&lt;/code&gt; in &lt;code class="coderef"&gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, if &lt;code&gt;expr&lt;/code&gt; is of instance &lt;code&gt;Sum&lt;/code&gt;, then we break down the &lt;code&gt;expr&lt;/code&gt;, and call &lt;code&gt;print&lt;/code&gt;
on its &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; properties in &lt;code class="coderef"&gt;4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Otherwise in &lt;code class="coderef"&gt;5&lt;/code&gt;, we throw an &lt;code&gt;IllegalArgumentException&lt;/code&gt; error because &lt;code&gt;expr&lt;/code&gt; is neither
a &lt;code&gt;Sum&lt;/code&gt; or &lt;code&gt;Num&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;4&lt;/code&gt;, we could have also used string templates instead, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Expr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Num&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;//                vvvvvvvvvvvvvvvvvvv   vvvvvvvvvvvvvvvvvvvv&lt;/span&gt;
        &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;${print(expr.left)} + ${print(expr.right)}&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unknown expression&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, we do not need to explicitly cast &lt;code&gt;expr&lt;/code&gt; as &lt;code&gt;Num&lt;/code&gt; or &lt;code&gt;Sum&lt;/code&gt;, like we have to do in
Java:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(...)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getValue&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="data-classes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;7: Data Classes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Data classes are like &lt;code&gt;case&lt;/code&gt; classes in Scala, they're for storing data, and have a lot of useful helper functions
baked in, like &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt; and the obligatory &lt;code&gt;toString&lt;/code&gt;. In this exercise, we really don't
have a lot to do, we just have to read through some of the code samples. One thing I feel that the samples missed out on
showing that &lt;code&gt;data&lt;/code&gt; classes can also have optional parameters. The following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;account_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;ac&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Nafiul Islam&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;A2231200ODSSDF4%%32123&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${ac.name}, ${ac.account_id}, ${ac.active}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Outputs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Nafiul Islam, A2231200ODSSDF4%%32123, true
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="extension-functions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;8: Extension functions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Kotlin team came up with a pretty neat euphemism for what is essentially &lt;em&gt;monkey-patching&lt;/em&gt;. Extension functions
allow you to &lt;em&gt;patch&lt;/em&gt; a class with extra methods. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastChar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastChar&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  &lt;span class="c1"&gt;// Outputs: !&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is pretty neat, we can actually monkey patch stdlib classes. So, without much further ado, we need to create
extension functions on &lt;code&gt;Int&lt;/code&gt;, to allow two new constructor methods for a &lt;code&gt;RationalNumber&lt;/code&gt;. One being,
&lt;code&gt;Int.r()&lt;/code&gt;, which allows us to create a rational number like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;4.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;// Outputs RationalNumber(4, 1), in essence 4/1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As well as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Outputs RationalNumber(10, 20), in essence 10/20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is one way of implementing such auxiliary constructors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RationalNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;numerator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;denominator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// 1&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;RationalNumber&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;RationalNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;Pair&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;RationalNumber&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;RationalNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;1&lt;/code&gt;, we have declared our &lt;code&gt;RationalNumber&lt;/code&gt; data class. This is already given to us in the exercise.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;2&lt;/code&gt;, we return an a &lt;code&gt;RationalNumber&lt;/code&gt;, the first parameter is &lt;code&gt;this&lt;/code&gt;, and the second &lt;code&gt;1&lt;/code&gt;.
Basically, creating &lt;code&gt;4/1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;3&lt;/code&gt;, we extend &lt;code&gt;Pair&lt;/code&gt;, this is an inbuilt class from the stdlib. In this case, we're extending a pair of
two &lt;code&gt;Int&lt;/code&gt; variables. Code completion brought up &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt; fields for &lt;code&gt;Pair&lt;/code&gt;. However,
the documentation did not say it had these fields:&lt;/p&gt;
&lt;img alt="Information on Pair" class="align-center" src="/images/koans_11.png" /&gt;
&lt;p&gt;Hitting &lt;kbd class="light"&gt;⌘&lt;/kbd&gt; + &lt;kbd class="light"&gt;B&lt;/kbd&gt; &lt;a class="footnote-reference" href="#gotosource" id="id8"&gt;[7]&lt;/a&gt; brought this up inside &lt;code&gt;Tuples.kt&lt;/code&gt; (which appears to be part of the stdlib):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pair&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// 1&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;second&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;  &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Serializable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;($first, $second)&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that in &lt;code class="coderef"&gt;1&lt;/code&gt; and &lt;code class="coderef"&gt;2&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt; is declared as variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="extending-collections"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id26"&gt;9: Extending Collections&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In this exercise, we have to extend collections. Following the convention of the other exercises before, we need to
translate some Java code to Kotlin code. In this case, the Java code does the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Group strings present in &lt;code&gt;collection&lt;/code&gt; by length.&lt;/li&gt;
&lt;li&gt;Find the maximum size of all the groups, meaning find the group that has the most number of members. Stored in
&lt;code&gt;maximumSizeOfGroup&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Return the members of the group with the highest number of members.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After deciphering the Java version of the program in &lt;code&gt;JavaCode9.java&lt;/code&gt;, I managed to figure out what needed to be done.
Here are the results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;doSomethingStrangeWithCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;groupsByLength&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;groupBy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;maximumSizeOfGroup&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;groupsByLength&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;groupsByLength&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt; &lt;span class="n"&gt;firstOrNull&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;maximumSizeOfGroup&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="object-expressions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;10: Object Expressions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This exercise shows us how to modify object instances on the fly. In this case, we need to modify &lt;code&gt;MouseAdapter&lt;/code&gt;
to register the number of clicks that it receives. So, following the examples, we can see that we need to use
the following syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Code goes here&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that set, lets modify our own instance of &lt;code&gt;MouseAdapter&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;task10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handleMouse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MouseListener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="py"&gt;mouseClicks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;customAdapter&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MouseAdapter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;MouseAdapter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;mouseClicked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MouseEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// 1&lt;/span&gt;
            &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MouseAdapter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="n"&gt;mouseClicked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// 2&lt;/span&gt;
            &lt;span class="n"&gt;mouseClicks&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;// 3&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;handleMouse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customAdapter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// 4&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mouseClicks&lt;/span&gt;  &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;1&lt;/code&gt; we override the function that handles mouse clicks. In &lt;code class="coderef"&gt;2&lt;/code&gt;, we make a call to the &lt;code&gt;super&lt;/code&gt; function. When
doing this, I did not know how to make this call and found it well documented in the reference &lt;a class="footnote-reference" href="#classesandinheritance" id="id9"&gt;[8]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;3&lt;/code&gt;, we increase the number of mouse clicks in our &lt;code&gt;mouseClicks&lt;/code&gt; variable. In &lt;code class="coderef"&gt;4&lt;/code&gt;, we register the handler
and finally in &lt;code class="coderef"&gt;5&lt;/code&gt;, we return the number of mouse clicks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="takeaway"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id28"&gt;Takeaway&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Kotlin Koans have a lot of material packed in. If you're coming from a language other than Java, it might be a
little difficult to understand what is going on. I wish it had more language agnostic instructions, as Kotlin is
targeting JavaScript platforms as well.&lt;/p&gt;
&lt;p&gt;What I've learnt from the Introduction is that Kotlin is a ridiculously powerful language. Some of its features can
even make Python sweat. The parts I liked most were lambdas, null safety features and extension functions.&lt;/p&gt;
&lt;p&gt;In total there are six parts to this series. We've just completed the first. I just can't wait for more :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="acknowledgements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id29"&gt;Acknowledgements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A big thanks to the following people:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Taro Nagasawa&lt;/li&gt;
&lt;li&gt;Keiron Pizzey&lt;/li&gt;
&lt;li&gt;Ilter Canberk&lt;/li&gt;
&lt;li&gt;Sahib Bin Mahboob&lt;/li&gt;
&lt;li&gt;Jeong Min-Lee&lt;/li&gt;
&lt;li&gt;Ashwini Chaudhury&lt;/li&gt;
&lt;li&gt;Hadi Hariri&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="mistake" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If I've made a mistake in this list, or if you have any other suggestions that I've missed out, please do not hesitate to add.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="hadi" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Hadi Hariri is an evangelist at Jetbrains.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="dash" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Dash doctests are also supported by other tools on different platforms. Check out &lt;a class="reference external" href="http://zealdocs.org/"&gt;Zeal&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="arigatou" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;有難うございます。(Thank you very much) to Taro Nagasawa for pointing this out to me :)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="lambdasreference" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;div class="first last line-block"&gt;
&lt;div class="line"&gt;Implicit iterators talked about towards the end of &amp;quot;Higher Order Functions&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://kotlinlang.org/docs/reference/lambdas.html"&gt;http://kotlinlang.org/docs/reference/lambdas.html&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="breslavunit" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;div class="first last line-block"&gt;
&lt;div class="line"&gt;Andrey Breslav, the lead designer of the language commented on Unit&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://confluence.jetbrains.com/display/Kotlin/Functions?focusedCommentId=40704501#comment-40704501"&gt;https://confluence.jetbrains.com/display/Kotlin/Functions?focusedCommentId=40704501#comment-40704501&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="gotosource" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For Win/Linux, one can use &lt;kbd class="light"&gt;CTRL&lt;/kbd&gt; + &lt;kbd class="light"&gt;B&lt;/kbd&gt;, in essence &amp;quot;Go to Source&amp;quot;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="classesandinheritance" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id9"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;In the section called &amp;quot;Overriding Rules&amp;quot; &lt;a class="reference external" href="http://kotlinlang.org/docs/reference/classes.html#overriding-rules"&gt;http://kotlinlang.org/docs/reference/classes.html#overriding-rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="kotlin"></category><category term="scala"></category><category term="java"></category><category term="jvm"></category><category term="language"></category></entry><entry><title>Making dash doctests using sphinx and doc2dash</title><link href="http://nafiulis.me/making-dash-doctests-using-sphinx-and-doc2dash.html" rel="alternate"></link><published>2014-10-24T11:16:00+06:00</published><updated>2014-10-24T11:16:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2014-10-24:making-dash-doctests-using-sphinx-and-doc2dash.html</id><summary type="html">&lt;p&gt;Dash is an offline documentation search engine. I've been using &lt;a class="reference external" href="http://kapeli.com/dash"&gt;Dash&lt;/a&gt; a lot recently.
It has very fast search and supports many libraries out there.
&lt;a class="reference external" href="zealdocs.org/"&gt;Zeal&lt;/a&gt; is a free and ope source alternative to Dash that uses Dash doctests for offline documentation
that supports all platforms. Other platform specific tools also exist such as
&lt;a class="reference external" href="http://velocity.silverlakesoftware.com/"&gt;Velocity&lt;/a&gt; for Windows and &lt;a class="reference external" href="http://lovelydocs.io/"&gt;LovelyDocs&lt;/a&gt; for
Android.&lt;/p&gt;
&lt;p&gt;Dash supports many libraries however, libraries like &lt;tt class="docutils literal"&gt;Fabric&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; are not officially supported; their
dash compatible doctests can be generated though. So, I thought I'd make a quick tutorial on how to generate doctests
for third party libraries:&lt;/p&gt;
&lt;div class="external youtube"&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/_B6drt8JEH4" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;</summary><category term="python"></category><category term="sphinx"></category><category term="dash"></category><category term="doc2dah"></category></entry><entry><title>A Todo app with flask and Pony</title><link href="http://nafiulis.me/a-todo-app-with-flask-and-pony.html" rel="alternate"></link><published>2014-10-09T12:30:00+06:00</published><updated>2014-10-09T12:30:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2014-10-09:a-todo-app-with-flask-and-pony.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#installation" id="id1"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#routes" id="id2"&gt;Routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#using-pony" id="id3"&gt;Using Pony&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#querying" id="id4"&gt;Querying&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#creating-objects" id="id5"&gt;Creating Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#deleting-objects" id="id6"&gt;Deleting Objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#references" id="id7"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#update" id="id8"&gt;Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#p-s" id="id9"&gt;P.S.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ponyorm.com/"&gt;Pony&lt;/a&gt; is a new ORM that has some very nice features especially when it comes to querying. It's
still in the works, missing features like migration and &lt;code&gt;py3&lt;/code&gt; support (although version &lt;code&gt;0.6&lt;/code&gt; supports &lt;code&gt;py3&lt;/code&gt;
and already has a release candidate), but the creators tell me that both these features will be made available by
the end of this year. So, I decided to make a simple todo app with pony, &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;flask&lt;/a&gt; and
&lt;a class="reference external" href="http://flask-restful.readthedocs.org/en/latest/"&gt;flask-restful&lt;/a&gt;. You can get the &lt;a class="reference external" href="https://github.com/gamesbrainiac/Pony-Todo-API/tree/83287fc4fd99ebb6dc9e613571695a8c835c46b9"&gt;source code&lt;/a&gt; from github.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Installation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First, we need to set up our project and install a couple of requirements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install flask flask-restful pony
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="routes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Routes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We are going to be making an API for out todo list. A todo item will have three things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;, the primary key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;, what the item is about e.g. write a tutorial on pony&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tags&lt;/code&gt;, what type of item it is, e.g. work, important, home&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to do this, lets create our routes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; will show you all the todo items on a &lt;code&gt;GET&lt;/code&gt; request. One can add new items with a &lt;code&gt;PUT&lt;/code&gt; request.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&amp;lt;int:todo_id&amp;gt;&lt;/code&gt; will allow a &lt;code&gt;GET&lt;/code&gt; request, and a &lt;code&gt;DELETE&lt;/code&gt; request.
that shows you information regarding the todo item with that &lt;code&gt;id&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/tags/&lt;/code&gt;, will show you all the tags that are available, with links to those tag elements&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/tags/&amp;lt;int:tag_id&amp;gt;&lt;/code&gt; will show you the corresponding tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus, a &lt;code&gt;tag&lt;/code&gt; must have an &lt;code&gt;id&lt;/code&gt; and a value, which will likely be a string. Lets get to making our routes
then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Inside app.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.restful&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;rest&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# Resource ######################################################################&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Will give you all the todo items&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Payload contains information to create new todo item&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TodoItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;todo_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Get specific information on a Todo item&lt;/span&gt;

&lt;span class="sd"&gt;        :param todo_id: The Todo Item&amp;#39;s ID, which is unique and a primary key&lt;/span&gt;
&lt;span class="sd"&gt;        :type todo_id: int&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Will show you all tags&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TagItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Will show you information about a specific tag&lt;/span&gt;

&lt;span class="sd"&gt;        :param tag_id: ID for the tag&lt;/span&gt;
&lt;span class="sd"&gt;        :type tag_id: int&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;# Routes #######################################################################&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Home&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TodoItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;lt;int:todo_id&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TodoItem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/tags/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TagItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/tags/&amp;lt;int:tag_id&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TagItem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt; methods inside the &lt;code&gt;rest.Resource&lt;/code&gt; objects indicate the types of methods that
you can use to interact with that route. The &lt;code&gt;api.add_resource(...)&lt;/code&gt; function allows you to register the API
handler, i.e. a &lt;code&gt;rest.Resource&lt;/code&gt; object and a route. the &lt;code&gt;endpoint&lt;/code&gt; is optional.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;endpoint&lt;/code&gt; is an optional parameter and gives its route a reference, which is useful for redirection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-pony"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Using Pony&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Right now, all the API will return are empty json objects. Before we actually start returning stuff,
lets make our models:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Inside models.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pony&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;  &lt;span class="c1"&gt;# 1&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 2&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;

    &lt;span class="n"&gt;_table_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Todos&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# 4&lt;/span&gt;

    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 5&lt;/span&gt;
    &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Tag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 6&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;_table_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Tags&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 7&lt;/span&gt;
    &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Todo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first thing we do is import &lt;code&gt;pony.orm&lt;/code&gt; in &lt;code class="coderef"&gt;1&lt;/code&gt; . In most of the documentation,
they import everything via &lt;code&gt;from pony.orm import *&lt;/code&gt;, but since I like namespaces,
I prefer using &lt;code&gt;orm&lt;/code&gt;. &lt;code&gt;pony.orm&lt;/code&gt; houses everything you need to create and query objects.&lt;/p&gt;
&lt;p&gt;We initialize the database using &lt;code&gt;orm.Database()&lt;/code&gt; in &lt;code class="coderef"&gt;2&lt;/code&gt;.
This instance of the &lt;code&gt;pony.orm.Database&lt;/code&gt; class stores all the data needed to create the tables that your models
define.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;3&lt;/code&gt;, we create an &lt;code&gt;Entity&lt;/code&gt; object by inheriting from &lt;code&gt;db.Entity&lt;/code&gt;. Note that we use the &lt;code&gt;db&lt;/code&gt;
instance, and not any import from &lt;code&gt;pony.orm&lt;/code&gt;. Its similar to SQLAlchemy's &lt;code&gt;sqlalchemy.schema.MetaData&lt;/code&gt;
object.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;4&lt;/code&gt;, we set the table name to &lt;code&gt;Todos&lt;/code&gt;, its a lot like &lt;code&gt;__tablename__&lt;/code&gt; in SQLAlchemy.&lt;/p&gt;
&lt;p&gt;In Pony, you can have either &lt;code&gt;Required&lt;/code&gt; columns or &lt;code&gt;Optional&lt;/code&gt; columns &lt;a class="reference external" href="http://doc.ponyorm.com/entities.html#entity-attributes"&gt;(described here)&lt;/a&gt;. In &lt;code class="coderef"&gt;5&lt;/code&gt;, we set &lt;code&gt;data&lt;/code&gt; to be a &lt;code&gt;Required&lt;/code&gt;
field of type &lt;code&gt;unicode&lt;/code&gt;. Note that this &lt;code&gt;unicode&lt;/code&gt; class is not from the &lt;code&gt;pony.orm&lt;/code&gt; namespace.&lt;/p&gt;
&lt;p&gt;You can also have many-to-many types in pony, using &lt;code&gt;Set&lt;/code&gt; in &lt;code class="coderef"&gt;6&lt;/code&gt; and &lt;code class="coderef"&gt;8&lt;/code&gt;. In &lt;code class="coderef"&gt;7&lt;/code&gt;,
we set &lt;code&gt;unique&lt;/code&gt; to be &lt;code&gt;True&lt;/code&gt;. You have a couple of optional attributes that you can add to
&lt;code&gt;Required&lt;/code&gt; or &lt;code&gt;Optional&lt;/code&gt; fields.
&lt;a class="reference external" href="http://doc.ponyorm.com/entities.html#required-and-optional"&gt;(Required and Optional Explained in more detail)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Notices any &lt;code&gt;id&lt;/code&gt; anywhere? No? Well, thats because pony implicitly creates the &lt;code&gt;id&lt;/code&gt; column for you.
&lt;a class="reference external" href="http://doc.ponyorm.com/firststeps.html#defining-entities"&gt;(More about implicit ID creation)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, in &lt;code&gt;app.py&lt;/code&gt; we need to bind a database and then
generate mappings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Inside app.py&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sqlite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;todo_api.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create_db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_tables&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# Resource #####################################################################&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We first bind the objects, in this case &lt;code&gt;Tag&lt;/code&gt; and &lt;code&gt;Todo&lt;/code&gt; to the sqlite database.
&lt;a class="reference external" href="http://doc.ponyorm.com/database.html#binding-the-database-object-to-a-specific-database"&gt;(More on binding databases)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We set &lt;code&gt;create_tables&lt;/code&gt; and &lt;code&gt;create_db&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; because this is a new database,
and no tables have been created yet.
&lt;a class="reference external" href="http://doc.ponyorm.com/database.html?highlight=bind#mapping-entities-to-the-database-tables"&gt;(More information regarding creating tables)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;generate_mapping&lt;/code&gt; generates all the SQL needed to create the tables. If you actually set
&lt;code&gt;orm.sql_debug(True)&lt;/code&gt;, then all the SQL that is being generated will be logged into your console.&lt;/p&gt;
&lt;p&gt;These are what the generated tables look like:&lt;/p&gt;
&lt;img alt="What the generated tables look like in Pony" class="align-center" src="images/pony_01.png" /&gt;
&lt;div class="section" id="querying"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;Querying&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Lets get to finding stuff from the database. First, we need to show all the todo items in our database for our
&lt;code&gt;Todos.get&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Inside app.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Will give you all the todo items&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db_session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# 1&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;task&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 2&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are using a context manager, &lt;code&gt;orm.db_session&lt;/code&gt; in &lt;code class="coderef"&gt;1&lt;/code&gt;. This treats everything that pony does within the
code-block as a transaction, you don't have to worry about committing. We are going to return a list of all the items
according to their &lt;code&gt;id&lt;/code&gt;, we have the &lt;code&gt;'task'&lt;/code&gt; value in the return dictionary provide the information
regarding the &lt;code&gt;Todo&lt;/code&gt; item. As for &lt;code&gt;'tags'&lt;/code&gt; we loop through the values in the item's tags and give the
&lt;code&gt;id&lt;/code&gt;. Note that in &lt;code class="coderef"&gt;2&lt;/code&gt;, we are looping through &lt;em&gt;all&lt;/em&gt; the &lt;code&gt;Todo&lt;/code&gt; items in the database, &lt;code&gt;Todo.select()&lt;/code&gt;
is the same as &lt;code&gt;orm.select(tdo for tdo in Todo)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, the &lt;code&gt;id&lt;/code&gt; of the tags alone are not enough information about the tags associated with a certain
&lt;code&gt;Todo&lt;/code&gt; item, it would be better if we could generate links to the tag pages. We can actually add a
&lt;code&gt;property&lt;/code&gt; inside &lt;code&gt;Tag&lt;/code&gt; as &lt;code&gt;url&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Inside models.py&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@property&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://localhost:5000/tags/{}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We use &lt;code&gt;property&lt;/code&gt; because we will be able to access it as if it were any other attribute.&lt;/p&gt;
&lt;p&gt;Now that we have added this property, we can call the &lt;code&gt;url&lt;/code&gt; property instead of the &lt;code&gt;id&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Inside app.py&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that this is done, lets send a &lt;code&gt;GET&lt;/code&gt; request to the &lt;code&gt;/&lt;/code&gt; url:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;quazinafiulislam@Nafiuls-Mac: ~
 $ http GET http://localhost:5000/
HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
Content-Length: &lt;span class="m"&gt;3&lt;/span&gt;
Content-Type: application/json
Date: Thu, &lt;span class="m"&gt;09&lt;/span&gt; Oct &lt;span class="m"&gt;2014&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;:32:00 GMT
Server: Werkzeug/0.9.6 Python/2.7.6

&lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-objects"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Creating Objects&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So that (probably) works! We won't know until we've added a &lt;code&gt;Todo&lt;/code&gt; item. We haven't inserted anything into our
database yet so lets do that. We are going to be accepted &lt;code&gt;PUT&lt;/code&gt; requests for our &lt;code&gt;/&lt;/code&gt; route. In order to
do this, we need to import the &lt;code&gt;json&lt;/code&gt; module, as well as &lt;code&gt;flask.request&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Inside app.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;  &lt;span class="c1"&gt;# New import&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;  &lt;span class="c1"&gt;# New import&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.restful&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;rest&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets start by working on our &lt;code&gt;Todos.put&lt;/code&gt; function. This is how the data is going to come in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Buy Milk!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;work&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;high&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to make this function work, we need to do a couple of things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Extract &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;tags&lt;/code&gt; from the json request.&lt;/li&gt;
&lt;li&gt;Create a new &lt;code&gt;Todo&lt;/code&gt; item.&lt;/li&gt;
&lt;li&gt;Create new tags, if tags exist, then you need to use them instead of creating new ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to fulfill those roles, this is the function I ended up with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Inside app.py&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Payload contains information to create new todo item&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 1&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db_session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# 2&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;  &lt;span class="c1"&gt;# 4&lt;/span&gt;
            &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 5&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# 6&lt;/span&gt;
                &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 7&lt;/span&gt;
            &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;  &lt;span class="c1"&gt;# 8&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;  &lt;span class="c1"&gt;# 9&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;1&lt;/code&gt; we are loading the data from &lt;code&gt;request.data&lt;/code&gt;, and turning that json string into a python dictionary.
After doing so, we start our database session by using the &lt;code&gt;orm.db_session&lt;/code&gt; context manager in &lt;code class="coderef"&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We start off in &lt;code class="coderef"&gt;3&lt;/code&gt; by creating a new &lt;code&gt;Todo&lt;/code&gt; item. Note that our arguments are named/keyword arguments. We now
loop over all the values in values in &lt;code&gt;info['tags']&lt;/code&gt; using &lt;code&gt;tag_name&lt;/code&gt; as the temporary variable in &lt;code class="coderef"&gt;4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;5&lt;/code&gt;, we try to &lt;em&gt;retrieve&lt;/em&gt; the tag if it exists in the database. If it doesn't &lt;code class="coderef"&gt;6&lt;/code&gt;,
then we create a new one in &lt;code class="coderef"&gt;7&lt;/code&gt;. We then append this tag to the item's list of tags in &lt;code class="coderef"&gt;8&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;9&lt;/code&gt; we return an empty json object, with a 200 code, to say that everything happened smoothly. Note that in this
entire function, it feels like there's &lt;em&gt;no database&lt;/em&gt;. I just find this amazing that I feel as if I'm working with
native python object stored in memory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;quazinafiulislam&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;Nafiuls&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Mac&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;
 &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="nx"&gt;PUT&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//localhost:5000/ data=&amp;quot;Buy rice&amp;quot; tags:=&amp;#39;[&amp;quot;work&amp;quot;, &amp;quot;high&amp;quot;]&amp;#39;&lt;/span&gt;
&lt;span class="nx"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="nx"&gt;OK&lt;/span&gt;
&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Thu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt; &lt;span class="nx"&gt;Oct&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt; &lt;span class="nx"&gt;GMT&lt;/span&gt;
&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Werkzeug&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;0.9.6&lt;/span&gt; &lt;span class="nx"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.7.6&lt;/span&gt;

&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yay! So that worked. Or did it? Lets go back to our home page at &lt;code&gt;/&lt;/code&gt; and lets see whats up:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;quazinafiulislam&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;Nafiuls&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Mac&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;
 &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="nx"&gt;GET&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//localhost:5000/&lt;/span&gt;
&lt;span class="nx"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="nx"&gt;OK&lt;/span&gt;
&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;166&lt;/span&gt;
&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Sat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="nx"&gt;Oct&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt; &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="nx"&gt;GMT&lt;/span&gt;
&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Werkzeug&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;0.9.6&lt;/span&gt; &lt;span class="nx"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.7.6&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;http://localhost:5000/tags/1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;http://localhost:5000/tags/2&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;task&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Buy rice&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we're done with the &lt;code&gt;Todo.get&lt;/code&gt; and &lt;code&gt;Todo.put&lt;/code&gt;, lets do &lt;code&gt;TodoItem.get&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TodoItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;todo_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Get specific information on a Todo item&lt;/span&gt;

&lt;span class="sd"&gt;        :param todo_id: The Todo Item&amp;#39;s ID, which is unique and a primary key&lt;/span&gt;
&lt;span class="sd"&gt;        :type todo_id: int&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db_session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;todo_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# 1&lt;/span&gt;
                &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# 2&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;task&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectNotFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we are getting &lt;code&gt;todo_id&lt;/code&gt; from the request itself, we can use it to get the &lt;code&gt;Todo&lt;/code&gt; item with that
&lt;code&gt;id&lt;/code&gt; in &lt;code class="coderef"&gt;1&lt;/code&gt;. This syntax is the same as &lt;code&gt;Todo.get(id=todo_id)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;2&lt;/code&gt;, we are are creating a list of dictionaries from the tags in &lt;code&gt;todo.tags&lt;/code&gt;. We are using &lt;code&gt;tag.name&lt;/code&gt;
and &lt;code&gt;tag.url&lt;/code&gt;. If you just wanted to get the names of of the tags, you could do either of these:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tag_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tag_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you think I'm pulling your leg, you can check the &lt;a class="reference external" href="https://github.com/gamesbrainiac/Pony-Todo-API/tree/83287fc4fd99ebb6dc9e613571695a8c835c46b9"&gt;source code&lt;/a&gt; and run it for yourself. In &lt;code class="coderef"&gt;3&lt;/code&gt; if we cannot find
the object, then we return a &lt;code&gt;404&lt;/code&gt; error message back.&lt;/p&gt;
&lt;p&gt;Now on to &lt;code&gt;Tags.get&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Will show you all tags&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db_session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nothing new here, very similar logic to our &lt;code&gt;/&lt;/code&gt; url. Finally in our &lt;code&gt;TagItem.get&lt;/code&gt; we have:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TagItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Will show you information about a specific tag&lt;/span&gt;

&lt;span class="sd"&gt;        :param tag_id: ID for the tag&lt;/span&gt;
&lt;span class="sd"&gt;        :type tag_id: int&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db_session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tag_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;todos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 1&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;tasks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectNotFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is similar logic to that of &lt;code&gt;TodoItem.get&lt;/code&gt;. The difference here is that in &lt;code class="coderef"&gt;1&lt;/code&gt;,
we're getting all the data for the &lt;code&gt;todos&lt;/code&gt; in a different way since we only need to know one thing.
The code in &lt;code class="coderef"&gt;1&lt;/code&gt; is the same as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="deleting-objects"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Deleting Objects&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All that's left is to find a way to delete objects from the database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;todo_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db_session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;todo_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# 1&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 2&lt;/span&gt;
                &lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 3&lt;/span&gt;

                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# 4&lt;/span&gt;
                        &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 5&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectNotFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;1&lt;/code&gt; we get the todo item like before. In &lt;code class="coderef"&gt;2&lt;/code&gt;, we copy the tags, because when we delete them in &lt;code class="coderef"&gt;3&lt;/code&gt;,
we can no longer reference them through &lt;code&gt;todo.tags&lt;/code&gt;, since the &lt;code&gt;todo&lt;/code&gt; item is marked for deletion. If you
do not do this, then you are going to get a &lt;code&gt;OperationWithDeletedObjectError&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;code class="coderef"&gt;4&lt;/code&gt; we check to see if the &lt;code&gt;tag&lt;/code&gt; has todo items associated with it, if it doesn't then we delete the tag too
in &lt;code class="coderef"&gt;5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, a demonstration of the API that we've built:&lt;/p&gt;
&lt;div class="external youtube"&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/LxssYsNPZZk" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;References&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ponyorm.com/"&gt;Official Pony ORM documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://flask-restful.readthedocs.org/en/latest/"&gt;Official Flask-RESTful documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Update&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Last Updated on 15 Oct 2014 7:00 PM&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I'd like to thank the pony ORM authors for their help in making this tutorial.&lt;/p&gt;
&lt;p&gt;You can also take a look at the &lt;a class="reference external" href="https://github.com/gamesbrainiac/Pony-Todo-API/tree/Modularized"&gt;modularized version of the source code&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="p-s"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;P.S.&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to know what command line tool I used to make requests, I used &lt;a class="reference external" href="https://github.com/jakubroztocil/httpie"&gt;httpie&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="pony"></category><category term="flask"></category><category term="ORM"></category><category term="flask-restful"></category></entry><entry><title>Testing out PyCharm's REST Client</title><link href="http://nafiulis.me/testing-out-rest-with-pycharm.html" rel="alternate"></link><published>2014-10-09T07:55:00+06:00</published><updated>2014-10-09T07:55:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2014-10-09:testing-out-rest-with-pycharm.html</id><summary type="html">&lt;p&gt;I've been trying out PyCharm's &amp;quot;Test RESTful Web Service&amp;quot; tool recently, just to check it out. I usually use
&lt;code&gt;requests&lt;/code&gt;, &lt;code&gt;httpie&lt;/code&gt; or &lt;code&gt;curl&lt;/code&gt; if I have to use command line tools, but the tool I use most is
&lt;a class="reference external" href="https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo"&gt;Advanced REST client&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Wanting to test out a sample API from &lt;a class="reference external" href="http://flask-restful.readthedocs.org/en/latest/"&gt;Flask-Restful&lt;/a&gt;,
I decided to take PyCharm's tool out for a spin. Here is the sample code from their &lt;a class="reference external" href="http://flask-restful.readthedocs.org/en/latest/quickstart.html"&gt;quickstart&lt;/a&gt; page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.restful&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Api&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TodoSimple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;todo_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;todo_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;todo_id&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;todo_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;todo_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;todo_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;todo_id&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;

&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TodoSimple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;lt;string:todo_id&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="How to get to the REST client" class="align-center" src="images/pycharm_rest_04.png" /&gt;
&lt;p&gt;&lt;code&gt;GET&lt;/code&gt; requests are easy enough. You don't need to change anything from the defaults:&lt;/p&gt;
&lt;img alt="Click the button indicated by the orange arrow to turn off the query string" class="align-center" src="images/pycharm_rest_01.png" /&gt;
&lt;p&gt;If you click the button indicated by the orange arrow, you will not have any query string in your URL. We will leave the
request body empty:&lt;/p&gt;
&lt;img alt="Keeping the request body empty" class="align-center" src="images/pycharm_rest_02.png" /&gt;
&lt;p&gt;After sending the request:&lt;/p&gt;
&lt;img alt="404 response" class="align-center" src="images/pycharm_rest_03.png" /&gt;
&lt;p&gt;The client supports syntax highlighting for multiple formats, like &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt; and &lt;code&gt;xml&lt;/code&gt;. In
this case, &lt;code&gt;html&lt;/code&gt; has been highlighted. You can also check out response headers in the adjacent tab.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; are just as easy, but they do not have the defaults that you'd expect.
For example, in &lt;code&gt;requests&lt;/code&gt;, your content type is implicitly set for you to
&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://127.0.0.1:5000/todo1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Make a tutorial on PyCharm&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;s REST client&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;application/x-www-form-urlencoded&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;    &amp;quot;todo1&amp;quot;: &amp;quot;Make a tutorial on PyCharm&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;s REST client&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This took me some time to figure out in PyCharm's REST client. I &lt;em&gt;knew&lt;/em&gt; I was doing something wrong,
but oddly enough it took me a while before I understood that it was because I had not set my content type in my
header. I think its because &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;requests&lt;/code&gt; and the chrome extension all set this implicitly for you.
The good news is that headers have code completion, but but not for values:&lt;/p&gt;
&lt;img alt="Setting content type" class="align-center" src="images/pycharm_rest_05.png" /&gt;
&lt;p&gt;This time, we set the text to the following, since we want to add a new todo list item:&lt;/p&gt;
&lt;img alt="Adding data to the request body" class="align-center" src="images/pycharm_rest_06.png" /&gt;
&lt;p&gt;Voilà, our request succeeds:&lt;/p&gt;
&lt;img alt="JSON request body" class="align-center" src="images/pycharm_rest_07.png" /&gt;
&lt;p&gt;You can do a lot more with the options that are available, like uploading from files,
adding request parameters and setting cookies.&lt;/p&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.python-requests.org/en/latest/user/advanced/#request-and-response-objects"&gt;Python Requests -Request and ResponseObjects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/a/3121175/1624921"&gt;StackOverflow - How can I see the request headers made by curl when sending a request to the server?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-s"&gt;
&lt;h2&gt;P.S.&lt;/h2&gt;
&lt;p&gt;This tool is also available in other jetbrains IDEs as well, like webstorm and intellij.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="REST"></category><category term="pycharm"></category><category term="jetbrains"></category><category term="intellij"></category></entry><entry><title>Understanding Schemas</title><link href="http://nafiulis.me/understanding-schemas.html" rel="alternate"></link><published>2014-10-08T15:44:00+06:00</published><updated>2014-10-08T15:44:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2014-10-08:understanding-schemas.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#schemas-are-namespaces" id="id1"&gt;Schemas are namespaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#inside-a-schema" id="id2"&gt;Inside a Schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#creating-schemas" id="id3"&gt;Creating Schemas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#references" id="id4"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;I've been brushing up on my SQL lately, and one key concept that I forgot about where schemas. I rarely used them
since I created most of my tables in the public schema (shame on me), but it was interesting to read up the
documentation on them again.&lt;/p&gt;
&lt;div class="section" id="schemas-are-namespaces"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Schemas are namespaces&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In short, schemas are namespaces that house your functions, tables triggers etc. What's a namespace? Its like a
container of addresses. The reason why we use them is to prevent cluttering of the main/public namespace.&lt;/p&gt;
&lt;p&gt;In fact, every table that you've ever created inside postgres lives inside a schema. For example,
in &lt;code&gt;psql&lt;/code&gt; you can use &lt;code&gt;\d&lt;/code&gt; and then hitting &lt;kbd class="light"&gt;tab&lt;/kbd&gt; to show you what schemas are available:&lt;/p&gt;
&lt;img alt="The dots indicate schemas or namespaces" class="align-center" src="images/schema_01.png" /&gt;
&lt;p&gt;The dots indicate that those options are schemas. There is always a schema involved when you create a table or a
function. Generally, all your functions are put into the &lt;code&gt;public&lt;/code&gt; schema. So, in the above example, we can see
&lt;code&gt;messages&lt;/code&gt; as a table, and it looks as though its not in a schema, but it is. One can also refer to it as
&lt;code&gt;public.messages&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=#&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;
   &lt;span class="k"&gt;Table&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;public.messages&amp;quot;&lt;/span&gt;
 &lt;span class="k"&gt;Column&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="k"&gt;Type&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Modifiers&lt;/span&gt;
&lt;span class="c1"&gt;--------+---------+-----------&lt;/span&gt;
 &lt;span class="n"&gt;id&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
 &lt;span class="k"&gt;data&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="nb"&gt;date&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="n"&gt;Indexes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;messages_pkey&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;btree&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=#&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;
   &lt;span class="k"&gt;Table&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;public.messages&amp;quot;&lt;/span&gt;
 &lt;span class="k"&gt;Column&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="k"&gt;Type&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Modifiers&lt;/span&gt;
&lt;span class="c1"&gt;--------+---------+-----------&lt;/span&gt;
 &lt;span class="n"&gt;id&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
 &lt;span class="k"&gt;data&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="nb"&gt;date&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="n"&gt;Indexes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;messages_pkey&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;btree&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="inside-a-schema"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Inside a Schema&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To see what tables are inside of a schema, you can keep on using tab completion, use a wildcard or use a query. Tab
completion is pretty self-explanatory. If you want to use a wildcard then use it like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;exercises&lt;/span&gt;&lt;span class="o"&gt;=#&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
               &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;relations&lt;/span&gt;
 &lt;span class="k"&gt;Schema&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;Name&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;Type&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="k"&gt;Owner&lt;/span&gt;
&lt;span class="c1"&gt;--------+------------+-------+------------------&lt;/span&gt;
 &lt;span class="n"&gt;cd&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;bookings&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;quazinafiulislam&lt;/span&gt;
 &lt;span class="n"&gt;cd&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;facilities&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;quazinafiulislam&lt;/span&gt;
 &lt;span class="n"&gt;cd&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;quazinafiulislam&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We use the extra &lt;code&gt;t&lt;/code&gt; in &lt;code&gt;\dt&lt;/code&gt; to give us table information only. If you use used &lt;code&gt;\d cd.*&lt;/code&gt;, then you'd
get a lot more information regarding each table. You can try it out for yourself.&lt;/p&gt;
&lt;p&gt;Another way to get the same information is use to use a query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;table_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cd&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this is also a schema, and this schema also exists under the &lt;code&gt;public&lt;/code&gt; schema. What do I mean by that,
well take a look at this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;exercises&lt;/span&gt;&lt;span class="o"&gt;=#&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;
                       &lt;span class="k"&gt;View&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;information_schema.tables&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;Column&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt;               &lt;span class="k"&gt;Type&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Modifiers&lt;/span&gt;
&lt;span class="c1"&gt;------------------------------+-----------------------------------+-----------&lt;/span&gt;
 &lt;span class="n"&gt;table_catalog&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql_identifier&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;table_schema&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql_identifier&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="k"&gt;table_name&lt;/span&gt;                   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql_identifier&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;table_type&lt;/span&gt;                   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;character_data&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;self_referencing_column_name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql_identifier&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;reference_generation&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;character_data&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="k"&gt;user_defined_type_catalog&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql_identifier&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="k"&gt;user_defined_type_schema&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql_identifier&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="k"&gt;user_defined_type_name&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql_identifier&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;is_insertable_into&lt;/span&gt;           &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yes_or_no&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;is_typed&lt;/span&gt;                     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yes_or_no&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;commit_action&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;character_data&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In essence, everything lives under the &lt;code&gt;public&lt;/code&gt; schema.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-schemas"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Creating Schemas&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Creating schemas are as simple as creating tables. Here's an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=#&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;SCHEMA&lt;/span&gt; &lt;span class="n"&gt;happy_schema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;SCHEMA&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you create a schema, you can also create tables and functions under it in one command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=#&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;SCHEMA&lt;/span&gt; &lt;span class="n"&gt;ShoppingCenters&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;-#&lt;/span&gt;     &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;Malls&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;-#&lt;/span&gt;     &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;SuperMarkets&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;SCHEMA&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=#&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="n"&gt;shoppingcenters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
                     &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;relations&lt;/span&gt;
     &lt;span class="k"&gt;Schema&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="n"&gt;Name&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;Type&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="k"&gt;Owner&lt;/span&gt;
&lt;span class="c1"&gt;-----------------+--------------+-------+------------------&lt;/span&gt;
 &lt;span class="n"&gt;shoppingcenters&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;malls&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;quazinafiulislam&lt;/span&gt;
 &lt;span class="n"&gt;shoppingcenters&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;supermarkets&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;quazinafiulislam&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This feels a lot like using python's &lt;code&gt;with&lt;/code&gt; statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;References&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/15644152/list-tables-in-a-postgresql-schema"&gt;List tables in a Postgresql Schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.postgresql.org/docs/9.1/static/ddl-schemas.html"&gt;Postgresql Schema&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="sql"></category><category term="postgresql"></category></entry><entry><title>Why you should be using Pyenv</title><link href="http://nafiulis.me/why-you-should-be-using-pyenv.html" rel="alternate"></link><published>2014-07-15T00:48:00+06:00</published><updated>2014-07-15T00:48:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2014-07-15:why-you-should-be-using-pyenv.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;TL;DR -&amp;gt; Install Pyenv its good for you. You'll thank me later.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, a lot of people have issues with managing their different Python versions. There are plenty of &amp;quot;pythons&amp;quot; out
there. There's &lt;code&gt;cpython2&lt;/code&gt;, &lt;code&gt;pypy&lt;/code&gt;, &lt;code&gt;stackless&lt;/code&gt;, &lt;code&gt;anaconda&lt;/code&gt;, &lt;code&gt;cpython3&lt;/code&gt; ...&lt;/p&gt;
&lt;p&gt;The list could go on forever.&lt;/p&gt;
&lt;p&gt;Thus it isn't a surprise to find people struggling with trying to leverage different versions of Python. I mean,
things can get messy, when you have two versions of Python installed. I for example have five versions of Python
installed.&lt;/p&gt;
&lt;p&gt;Luckily, there's a tool out there that allows you to seamlessly change between the different versions of Python on
your *nix operating system (sorry Windows folks, no dice). Its called &lt;a class="reference external" href="https://github.com/yyuu/pyenv"&gt;Pyenv&lt;/a&gt; (you
probably guessed that one).&lt;/p&gt;
&lt;p&gt;On a mac, &lt;code&gt;pyenv&lt;/code&gt; is pretty easy to install, using homebrew with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install pyenv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For linux, you can use the following &lt;a class="reference external" href="https://github.com/yyuu/pyenv-installer"&gt;installer&lt;/a&gt;. Just to top it off here
are the benefits:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Manage multiple versions of the Python interpreter, this includes not only the language versions but also different
interpreters entirely.&lt;/li&gt;
&lt;li&gt;Stay up to date with all the latest versions of Python that's coming out.&lt;/li&gt;
&lt;li&gt;Change seamlessly between the different versions of Python, you have complete control over what the &lt;code&gt;python&lt;/code&gt;
alias means.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="pyenv"></category><category term="python"></category><category term="tools"></category></entry><entry><title>Watch out iPython here comes b(i)python!</title><link href="http://nafiulis.me/watch-out-ipython-here-comes-bpython.html" rel="alternate"></link><published>2014-05-20T20:21:00+06:00</published><updated>2014-05-20T20:21:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2014-05-20:watch-out-ipython-here-comes-bpython.html</id><summary type="html">&lt;img alt="Like what you see?" class="align-center" src="images/bpython.png" /&gt;
&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#getting-started" id="id1"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#a-few-quick-tips" id="id2"&gt;A Few Quick Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#sweet-code-completion" id="id3"&gt;Sweet code completion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#don-t-worry-if-you-mess-up" id="id4"&gt;Don't worry if you mess up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#share-your-code-on-the-fly" id="id5"&gt;Share your code on the fly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#contacting-the-team" id="id6"&gt;Contacting the team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#but-what-if-you-wanted-both" id="id7"&gt;But what if you wanted both?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#update" id="id8"&gt;Update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;So if you've been using Python for some time now, you've probably heard of &lt;a class="reference external" href="http://ipython.org/"&gt;iPython&lt;/a&gt;. This is
pretty much the go to shell for most pythonistas who want to get a better command line debug experience. I find
&lt;code&gt;ipdb&lt;/code&gt; to be a godsend when I'm quickly trying to diagnose the problem.&lt;/p&gt;
&lt;p&gt;But what about when you're trying to &lt;em&gt;explore&lt;/em&gt; a library or even write some code quickly with plenty of
auto-completion, or perhaps quickly demonstrate something, you might want to chose &lt;code&gt;bpython&lt;/code&gt;. And if you wanted
the best of both worlds, both &lt;code&gt;ipython&lt;/code&gt; and &lt;code&gt;bpython&lt;/code&gt;, there's &lt;code&gt;bipython&lt;/code&gt;. But first,
lets take a look at what &lt;code&gt;bpython&lt;/code&gt; can offer us:&lt;/p&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Getting Started&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;bpython&lt;/code&gt; works on &lt;code&gt;*nix&lt;/code&gt; systems with ease, for windows users all you need to is use
&lt;a class="reference external" href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#curses"&gt;this installer&lt;/a&gt; to install the package. But &lt;code&gt;*nix&lt;/code&gt; users,
its much simpler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install bpython
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my tests &lt;code&gt;bpython&lt;/code&gt; worked with &lt;strong&gt;both python 2 and python 3 as well as pypy&lt;/strong&gt; because its written in pure python and
the only dependency &lt;code&gt;bpython&lt;/code&gt; has is on &lt;code&gt;pygments&lt;/code&gt;:&lt;/p&gt;
&lt;img alt="bpython works on Python 3!" class="align-center" src="images/bpython_works_on_3.png" /&gt;
&lt;p&gt;Once you've installed &lt;code&gt;bpython&lt;/code&gt;, you can then just involve it from the command line:&lt;/p&gt;
&lt;img alt="How you start it :)" class="align-center" src="images/bpython_start.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="a-few-quick-tips"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;A Few Quick Tips&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The first thing I learn to do with any shell or any new software for that matter is how to get out out of it. The best
way to get out of &lt;code&gt;bpython&lt;/code&gt; is just to hit &lt;code&gt;CTRL&lt;/code&gt; + &lt;code&gt;D&lt;/code&gt;, and that will take you out.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bpython&lt;/code&gt; will automatically add the contents of your session to your console.&lt;/li&gt;
&lt;li&gt;You can save you session with &lt;code&gt;CTRL&lt;/code&gt; + &lt;code&gt;S&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can clear the &lt;code&gt;bpython&lt;/code&gt; screen with &lt;code&gt;CTRL&lt;/code&gt; + &lt;code&gt;L&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sweet-code-completion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Sweet code completion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I love code completion. How can you not love something that pretty much writes your code for you? As a person who's
always looking out for better tools, &lt;code&gt;bpython&lt;/code&gt; hits the spot. It's got the best code completion I've seen in
&lt;em&gt;any&lt;/em&gt;
shell, it even puts &lt;code&gt;fish&lt;/code&gt; to shame:&lt;/p&gt;
&lt;div class="external youtube"&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/ghohKayNeds" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;What I love about &lt;code&gt;bpython&lt;/code&gt; is how fast the code completion pops up and the way documentation just pops up when you
want to use a function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="don-t-worry-if-you-mess-up"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Don't worry if you mess up&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I'm trying to reproduce something on the command line, I often make mistakes (although with &lt;code&gt;bpython&lt;/code&gt;'s
code completion it's a lot harder to do). I'm trying to import &lt;code&gt;asyncio&lt;/code&gt; here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asycnio&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;input&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;asycnio&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, when you're trying to send a console session to someone, these mistakes are not only annoying but also can get
in the way of the person trying to help you, so you can just redo the last line with &lt;code&gt;CTRL&lt;/code&gt; + &lt;code&gt;r&lt;/code&gt;:&lt;/p&gt;
&lt;div class="external youtube"&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/JSYV9h2Mrr4" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;Please note that this does not negate what you did, it just clears the screen of the last command that you input. So
if you imported &lt;code&gt;datetime&lt;/code&gt;, but you actually wanted to import &lt;code&gt;requests&lt;/code&gt; (yes,
I don't know how to spell but bear with me), then &lt;code&gt;datetime&lt;/code&gt; will still be usable from the shell:&lt;/p&gt;
&lt;div class="external youtube"&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/_h9BlN4s_wM" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="share-your-code-on-the-fly"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Share your code on the fly&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to share your session with someone, you can do that in just one keystroke &lt;code&gt;F8&lt;/code&gt;. It will prompt you
for confirmation, after which you can view your paste on bpython's code hosting site:&lt;/p&gt;
&lt;img alt="Pastebin" class="align-center" src="images/bpython_natsu.png" /&gt;
&lt;p&gt;After you've said yes to the prompt, it will generate a link for you, so
&lt;a class="reference external" href="http://bpaste.net/show/NnLYEXislfYLVZTKVgAE/"&gt;this&lt;/a&gt; is the one it generated for my session.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="contacting-the-team"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Contacting the team&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These are just &lt;em&gt;some&lt;/em&gt; of the awesome things you can do with &lt;code&gt;bpython&lt;/code&gt;. There's probably more. I don't know them
all since I'm still exploring what you can do with it.&lt;/p&gt;
&lt;p&gt;You can find out more about by talking to the guys on their &lt;code&gt;irc&lt;/code&gt; in &lt;code&gt;#bpython&lt;/code&gt; on &lt;code&gt;irc.freenode.net&lt;/code&gt;.
Find out more about the community around &lt;code&gt;bpython&lt;/code&gt; &lt;a class="reference external" href="http://bpython-interpreter.org/community/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I initially though that &lt;code&gt;bpyhon&lt;/code&gt; was not properly maintained, but if you take a look at &lt;a class="reference external" href="https://bitbucket.org/bobf/bpython"&gt;their project page&lt;/a&gt;, it seems that its being kept up to date:&lt;/p&gt;
&lt;img alt="Its up to date :)" class="align-center" src="images/bpython_bb.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="but-what-if-you-wanted-both"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;But what if you wanted both?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well you'd have to use &lt;code&gt;bipython&lt;/code&gt; then. Its still in the works, and there's no proper highlighting for
errors right now like in &lt;code&gt;ipython&lt;/code&gt;, but its heading towards being a package that unifies both
&lt;code&gt;ipython&lt;/code&gt; and &lt;code&gt;bpython&lt;/code&gt;. So, you need to install &lt;code&gt;ipython&lt;/code&gt;, &lt;code&gt;bipython&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install ipython bipython
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And you're done with the installations but running &lt;code&gt;bipython&lt;/code&gt; is not as simple. At this time,
&lt;code&gt;bipython&lt;/code&gt; does not work with python 3, but it does work with python 2. Have a look:&lt;/p&gt;
&lt;div class="external youtube"&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/w9JcgM2YN4I" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Update&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Last Updated on 15 Nov 2014 1:11 PM&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Information about &lt;tt class="docutils literal"&gt;bipython&lt;/tt&gt; added.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="ipython"></category><category term="bpython"></category><category term="python-shell"></category><category term="python"></category><category term="ide"></category></entry><entry><title>Rifts in the Community</title><link href="http://nafiulis.me/rifts-in-the-community.html" rel="alternate"></link><published>2014-04-29T17:54:00+06:00</published><updated>2014-04-29T17:54:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2014-04-29:rifts-in-the-community.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#diving-deeper" id="id2"&gt;Diving Deeper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#challenges" id="id3"&gt;Challenges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#solutions" id="id4"&gt;Solutions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pool-our-resources" id="id5"&gt;Pool our resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#admitting-our-problems" id="id6"&gt;Admitting our problems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#make-it-easier-to-contribute" id="id7"&gt;Make it easier to contribute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#resources" id="id8"&gt;Resources&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-global-interpreter-lock-gil" id="id9"&gt;The Global Interpreter Lock (GIL)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pypy" id="id10"&gt;PyPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1" id="id11"&gt;Pyston&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#python-2-to-3" id="id12"&gt;Python 2 to 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;I love Python. Its the first programming language that I really stuck to. At the time when I was first starting, Python
had a lot going for it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;MIT taught its Introductory CS Course in Python&lt;/li&gt;
&lt;li&gt;Python was widely used in the Scientific community&lt;/li&gt;
&lt;li&gt;It was very intuitive and easy to use off the bat&lt;/li&gt;
&lt;li&gt;The community on StackOverflow was super nice too&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, my journey began with MITx's Introduction to Computer Science course, and although it was the first time such a
course was offered on &lt;a class="reference external" href="https://www.edx.org/"&gt;edx&lt;/a&gt;, it was pretty darn awesome. The course was mostly taught by John
Guttag. Most of the lectures made sense, and the homework questions were a lot of fun to complete. I made a lot of
diverse friends too; one guy, a plumber but learning code so that he could help his son learn code (what an awesome
dad!).&lt;/p&gt;
&lt;p&gt;I never finished the course, but it gave me enough to get started with Python and programming. I started asking
questions on StackOverflow, and soon started answering them too. I soon found one of the hidden gems of the site,
its &lt;a class="reference external" href="http://chat.stackoverflow.com/"&gt;chat-room&lt;/a&gt;. I was enthralled by the community that grew around Python,
it was and continued to be a super helpful community.&lt;/p&gt;
&lt;div class="section" id="diving-deeper"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Diving Deeper&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;However, as I started diving deeper into things I soon came to realize a few of Python's limitations. First and
foremost was that Python was very slow in some cases, especially when it came to raw loops or dealing with numbers. I
personally was super grateful for Python's Integer promotion (helped me a lot with a couple of assignments and
Project Euler too). However, I also realized there were many cases where Python can be optimised. The Python
community responded to these problems by dividing the problem into different parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To make numerical data crunching (for lack of a better term) faster, the community came up with numpy.&lt;/li&gt;
&lt;li&gt;For wrapping third party C libraries, there came &lt;a class="reference external" href="http://www.swig.org/"&gt;swig by David Beazley&lt;/a&gt; and
&lt;a class="reference external" href="http://cython.org/"&gt;cython&lt;/a&gt; which is an evolutionary form of the Pyrex project. Please note that Cython is
&lt;em&gt;python specific&lt;/em&gt; whereas swig can be used with other programming languages as well. If you'd like to know more
about these two libraries, I feel that &lt;a class="reference external" href="https://www.youtube.com/watch?v=mv0kfiepn3s"&gt;this video&lt;/a&gt; does a good job
at exploring what they are, and highlights the features that make them different.&lt;/li&gt;
&lt;li&gt;Python Implementation, faster implementations have popped up like &lt;strong&gt;Pypy&lt;/strong&gt; (a faster implementation of
Python thanks to JIT). &lt;strong&gt;Jython/IronPython&lt;/strong&gt;, both of which take advantage of their respective VMs,
bypassing Python's GIL. Most recently,
&lt;a class="reference external" href="https://tech.dropbox.com/2014/04/introducing-pyston-an-upcoming-jit-based-python-implementation/"&gt;Pyston&lt;/a&gt;.
There are others, but they have not gained enough traction.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, I can tell you that numpy (and Python's Data tools in general) was a huge success,
and hence Python's scientific community has thrived. I can
honestly say this with pride, that Python's data tools and libraries are arguably the best of the breed. PyData,
which is a conference dedicated to the discussion of Python's data tools (and boy are there &lt;em&gt;plenty&lt;/em&gt; of them) has
been growing both in popularity and influence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenges"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Challenges&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now the tools that the scientific community employ are third party libraries,
they do not offer changes to the &lt;em&gt;implementation&lt;/em&gt; of Python itself. However, the projects that are &lt;em&gt;trying&lt;/em&gt; to make
headway have two really big challenges, and the two are actually quite interconnected. So,
what does making python &lt;em&gt;faster&lt;/em&gt; mean? In essence there are two parts to it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Making Python code itself execute faster&lt;/li&gt;
&lt;li&gt;Better support for concurrency in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now in order to meet the first goal, pypy implemented a JIT compiler and it WORKS! You can check it out yourself.
Pyston on the other hand is trying to achieve JIT but through a different means (&lt;a class="reference external" href="http://pypy.readthedocs.org/en/latest/faq.html#could-we-use-llvm"&gt;which has been attempted by pypy&lt;/a&gt;, but was not successful; it still remains a
theoretical possibility). The first challenge here is make an implementation successful enough to replace CPython. I
feeling that if the two camps, Pyston with its Dropbox backing and Pypy with its years of experience were to combine
their efforts, then we might be able to see good results even faster. I know its just conjecture,
but its something that might divide our community between two sides, ones that use pypy and the other which uses
Pyston. Right now, Pyston is working towards supporting only Python 2.&lt;/p&gt;
&lt;p&gt;Secondly, trying to get rid of the GIL has be a major problem (this is the reason why threading will often slow down
your python programs), and as Alex Gaynor put it, a subtle reason for the division in our community:&lt;/p&gt;
&lt;blockquote&gt;
I think there's been little uptake because Python 3 is fundamentally unexciting. It doesn't have the super big
ticket items people want, such as removal of the GIL or better performance (for which many are using PyPy).&lt;/blockquote&gt;
&lt;p&gt;Most attempts at making Python faster work mostly with Python 2.7.*. Pypy 3 is not fully stable yet, and pypy-stm,
which is pypy's attempt at removing the GIL (iirc) is aimed at Python 2 and not 3. Thus we come to the second big
problem, and that is division between python 2 and 3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solutions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Solutions&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="pool-our-resources"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Pool our resources&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We need to get the experts in the Python community together. We also need to get the companies that use python to
back up a project that can make a python implementation fast enough to compete with Javascript's v8 engine,
and one that supports concurrency well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="admitting-our-problems"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Admitting our problems&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Everyone knows that Python 3 has issues. Every single time someone says &amp;quot;Unicode&amp;quot;, I scream &amp;quot;Python 3&amp;quot; inside my head.
Right now the Python community is in a state of denial regarding Python 3:&lt;/p&gt;
&lt;div class="external"&gt;
    &lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Guys i get it. I should not say anything bad about Python 3 because
    clearly I don&amp;#39;t see the big picture.&lt;/p&gt;&amp;mdash; Armin Ronacher (@mitsuhiko)
    &lt;a href="https://twitter.com/mitsuhiko/statuses/461156792685559808"&gt;April 29, 2014&lt;/a&gt;&lt;/blockquote&gt;
    &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;&lt;p&gt;We need to get out of it, and start working words solving the problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="make-it-easier-to-contribute"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Make it easier to contribute&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pythonistas &lt;em&gt;want&lt;/em&gt; to help. We need to have more resources describing the problems that we face right now. Pypy
project does an excellent job of that, and the effort they put into their FAQs are laudable with the exception of
describing what rPython is:&lt;/p&gt;
&lt;blockquote&gt;
RPython is a restricted subset of Python that is amenable to static analysis. Although there are additions to the
language and some things might surprisingly work, this is a rough list of restrictions that should be considered.
Note that there are tons of special cased restrictions that you’ll encounter as you go. The exact definition is
“RPython is everything that our translation tool-chain can accept” :)&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Resources&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to get started on understanding what these different technologies are, then these resources will help:&lt;/p&gt;
&lt;div class="section" id="the-global-interpreter-lock-gil"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;The Global Interpreter Lock (GIL)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=ph374fJqFPE"&gt;David Beazley's talk on the GIL&lt;/a&gt; was pretty much the only talk I
needed to get started, and (sadly) I did not do much more than that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pypy"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;PyPy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=l_HBRhcgeuQ"&gt;Beazley's Keynote on Pypy&lt;/a&gt; was an excellent talk (if you haven't
realized already, I adore Beazley's talks). He really dives into the guts on Pypy on this one,
and shows you how it works from the inside.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=Q9wf63flICs"&gt;Pypy and Software Transactional Memory&lt;/a&gt; is a good talk,
but not the best. Its made by members of Pypy's core team, and introduces what STM is. Although this talk leaves a
lot to be desired of, you can still walk away with some key points regarding what STM is and why its useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Pyston&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a new attempt at making a faster python implementation, backed by Dropbox. You can take a look at their
progress on their &lt;a class="reference external" href="https://github.com/dropbox/pyston"&gt;github project page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-2-to-3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Python 2 to 3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://lucumr.pocoo.org/2013/5/21/porting-to-python-3-redux/"&gt;Armin Ronacher's blog post on porting from 2 to 3&lt;/a&gt;,
really good stuff. He's been a strong critic of Python 3, but I feel that he justifies is position well and regularly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="community"></category><category term="languages"></category><category term="pyston"></category><category term="pypy"></category></entry><entry><title>I've joined the dark side</title><link href="http://nafiulis.me/i've-joined-the-dark-side.html" rel="alternate"></link><published>2014-03-23T20:45:00+06:00</published><updated>2014-03-23T20:45:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2014-03-23:i've-joined-the-dark-side.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#some-developer-apps" id="id2"&gt;Some developer apps&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#oh-my-zsh" id="id3"&gt;Oh-My-ZSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#homebrew" id="id4"&gt;Homebrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pyenv" id="id5"&gt;pyenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#sublime-text-3" id="id6"&gt;Sublime Text 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pycharm" id="id7"&gt;PyCharm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#keka" id="id8"&gt;Keka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#appcleaner" id="id9"&gt;AppCleaner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-switch" id="id10"&gt;The Switch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;So, after debating about it for quite some time, I finally got myself a Mac! Now, I got myself a Mac book pro 15 inch
and it pretty much cost me a fortune. So far, I've been playing around with it, and I gotta say, that I would prefer
a Mac over windows for Python development, any day. But before I tell you why its so great, let me share a couple of
tools that I've found immensely useful. So, here's a list that any Python dev would find useful on a new Mac:&lt;/p&gt;
&lt;div class="section" id="some-developer-apps"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Some developer apps&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="oh-my-zsh"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id3"&gt;Oh-My-ZSH&lt;/a&gt;&lt;/h3&gt;
&lt;img alt="Oh my ZSH!" class="align-center" src="images/omzsh.png" /&gt;
&lt;p&gt;This is a must install for me on &lt;em&gt;any&lt;/em&gt; *nix system. It gives me some &lt;em&gt;awesome&lt;/em&gt; auto-completion, and some very
beautiful themes. Frankly, I don't even think I want &lt;em&gt;need&lt;/em&gt; to justify why one should install this awesome tool,
just give it a tool, if you don't like it, then you can always change back. Check it out on &lt;a class="reference external" href="https://github.com/robbyrussell/oh-my-zsh"&gt;oh-my-zsh&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="homebrew"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;Homebrew&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is such a wonderful package manager for Mac. I was initially split between Macports and Homebrew, but most of
the people I talked to, overwhelmingly favored Homebrew. What &lt;em&gt;really&lt;/em&gt; got me to pick Homebrew was that Pyenv supported
a direct installation via Homebrew (Pyenv is next on the list). With homebrew installed with a quick:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ruby -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And bam! All installed. I just copied and pasted the text from the &lt;a class="reference external" href="http://brew.sh/"&gt;homebrew website&lt;/a&gt;, so I did not
even notice that I was using ruby. You gotta love *nix systems for having python and ruby installed by default. With
brew, I made my first install:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install pyenv
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pyenv"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;pyenv&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This allows you to manage different versions of Python with ease. Really useful if you want to work with different
versions of python on the command line. Check it out &lt;a class="reference external" href="https://github.com/yyuu/pyenv"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sublime-text-3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Sublime Text 3&lt;/a&gt;&lt;/h3&gt;
&lt;img alt="Sublime Text 3" class="align-center" src="images/st3.png" /&gt;
&lt;p&gt;Wonderful text editor, I use this for small projects or a quick edit. For more intensive projects,
I use pycharm. Although their website says that ST3 is still in beta, its been pretty stable for me, and the package
manager for ST3 works very well. I suggest using ST3 because its starts up instantly,
compared to ST2. If you're going to be using this, then I suggest you install the package manager as soon as you've
installed ST3, &lt;a class="reference external" href="https://sublime.wbond.net/installation"&gt;instructions here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pycharm"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;PyCharm&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Well, I was bound to install this at &lt;em&gt;some&lt;/em&gt; point. In my honest opinion, this is the Python IDE to beat. Just make sure
you create the &lt;code&gt;charm&lt;/code&gt; Terminal variable, through &amp;quot;Create Command Line Launcher&amp;quot; option:&lt;/p&gt;
&lt;img alt="Creating PyCharm command line launcher" class="align-center" src="images/commandlinelauncher.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="keka"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Keka&lt;/a&gt;&lt;/h3&gt;
&lt;img alt="Keka" class="align-center" src="images/keka.png" /&gt;
&lt;p&gt;This is for unpacking archives. Really simple to use tool. Its available on the Mac Store as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="appcleaner"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;AppCleaner&lt;/a&gt;&lt;/h3&gt;
&lt;img alt="App Cleaner" class="align-center" src="images/appcleaner.png" /&gt;
&lt;p&gt;Simple app that completely uninstalls your installed apps. Works like a charm. Get it
&lt;a class="reference external" href="http://www.freemacsoft.net/appcleaner/"&gt;on their site&lt;/a&gt;. I recommend this as a must install since a lot of the
times, your
apps leave behind settings, that come back to bite you if you reinstall.&lt;/p&gt;
&lt;p&gt;And thats a wrap. You can find loads of other tools available, and &lt;code&gt;git&lt;/code&gt; comes installed by default. If you
want to install mercurial, then its a simple &lt;code&gt;brew install hg&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-switch"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;The Switch&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For me, it was &lt;em&gt;very&lt;/em&gt; painful at first. The keyboard was just plain &lt;em&gt;wrong&lt;/em&gt;, it had the &lt;code&gt;control&lt;/code&gt; key in the
&lt;em&gt;wrong&lt;/em&gt; place. I say &lt;em&gt;wrong&lt;/em&gt; because the standard keyboard for windows and Linux is very different. I just wish Apple
had followed the general keyboard layout, it would make migration so much simpler. However, this was probably the
only problem I had with my new Mac Book pro, and everything else is pretty neat. The best thing about Mac is that the
platform had &lt;em&gt;many&lt;/em&gt; apps for windows virtualisation. My pick would be Vmware Fusion, it allows you to run Windows
apps as if they were mac applications.&lt;/p&gt;
&lt;p&gt;The only qualm I have right now is that I haven't been able to find a download manager that comes close to Internet
Download Manager (IDM). I'm using the free version of Folx. It sucks. It looks nice, but it sucks.&lt;/p&gt;
&lt;p&gt;Other than that, I feel that a Mac was exactly what I needed since although Ubuntu is nice,
it lacks some good commercial software for screen recording, which is something that I &lt;em&gt;really&lt;/em&gt; need.&lt;/p&gt;
&lt;p&gt;If you make the switch to Mac, and you're an open source developer, I assure you that you won't regret it. Funnily
enough, three days after I got my mac, my PC just died. I took it to the repair guy,
and he told me that the motherboard was broke. I had just spend 50 bucks on repairs a week ago. The motherboard would
cost me another $250.&lt;/p&gt;
&lt;p&gt;I won't my fixing my PC any time soon.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Python"></category><category term="Mac"></category><category term="Windows"></category><category term="Apple"></category><category term="Tools"></category><category term="PyCharm"></category></entry><entry><title>Updating Pycharm 3.0.2 on Ubuntu</title><link href="http://nafiulis.me/updating-pycharm-3.0.2-on-ubuntu.html" rel="alternate"></link><published>2013-12-12T20:21:00+06:00</published><updated>2013-12-12T20:21:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2013-12-12:updating-pycharm-3.0.2-on-ubuntu.html</id><summary type="html">&lt;p&gt;Now, I've just come out of an issue with Jetbrains PyCharm 3. The problem was this,
updating the software to &lt;code&gt;3.0.2&lt;/code&gt;. I had &lt;code&gt;3.0.1&lt;/code&gt; installed. Now, when the update &lt;em&gt;initially&lt;/em&gt;
came around, the IDE told me, that I had to download the &lt;em&gt;entire&lt;/em&gt; file all over again from
the jetbrains website.&lt;/p&gt;
&lt;p&gt;So, I downloaded the newest version, and it turned out that the update was broken,
when I went to unzip the software, Archive Manager lashed out saying that it was a broken
archive file. So, I had another guy check it out, and he got broken archive too.&lt;/p&gt;
&lt;p&gt;After a couple of days, jetbrains &lt;em&gt;realised&lt;/em&gt; that they messed up so, they put in a patch.
I downloaded the patch, and this time &lt;em&gt;again&lt;/em&gt;, I had another problem. What was it this time,
it turns out that I did not have rights to update Pycharm (imagine that!). So, in order to
update it, I had to find out &lt;em&gt;where&lt;/em&gt; it was installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;whereis pycharm
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, the file was installed &lt;code&gt;/opt/pycharm-3.0.1/bin/pycharm.sh&lt;/code&gt;. So, I went in there,
and opened it as root:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo bash /opt/pycharm-3.0.1/bin/pycharm.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that, I just checked for updates, by clicking the check link to the bottom left of the dialogue
box:&lt;/p&gt;
&lt;img alt="Where to look for the update link" class="align-center" src="images/pycharm.png" /&gt;
&lt;p&gt;The update worked after that. So, if you find yourself in a similar predicament, then I strongly advise
you to run the &lt;code&gt;pycharm.sh&lt;/code&gt; file as root.&lt;/p&gt;
</summary><category term="IDE"></category><category term="pycharm"></category><category term="jetbrains"></category><category term="issues"></category><category term="python"></category></entry><entry><title>Fabric Entry Creation</title><link href="http://nafiulis.me/fabric-entry-creation.html" rel="alternate"></link><published>2013-12-11T00:58:00+06:00</published><updated>2013-12-11T00:58:00+06:00</updated><author><name>Nafiul Islam</name></author><id>tag:nafiulis.me,2013-12-11:fabric-entry-creation.html</id><summary type="html">&lt;p&gt;So, in my attempts to create a functioning static blog generator using pelican,
I've been using fabric to create my entries so that I can easily sort them according
to their dates.&lt;/p&gt;
&lt;p&gt;Here's the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f_create&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;content/{}_{:0&amp;gt;2}_{:0&amp;gt;2}_{}.rst&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f_create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;template.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;hashes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;File created -&amp;gt; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f_create&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, when I was doing this, I initally used the &lt;tt class="docutils literal"&gt;datetime.date&lt;/tt&gt; class, but that did not
have the &lt;tt class="docutils literal"&gt;hour&lt;/tt&gt; and the &lt;tt class="docutils literal"&gt;minute&lt;/tt&gt; attributes in the class. I also did not want to bother with
&lt;tt class="docutils literal"&gt;slug&lt;/tt&gt; creation, so I got that build in too.&lt;/p&gt;
&lt;p&gt;I tried to get all the template string inside the function, but later on decided to refactor it out to
a &lt;tt class="docutils literal"&gt;template.txt&lt;/tt&gt;, which I can more easily use and change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{title}
{hashes}

:date: {year}-{month}-{day} {hour}:{minute}
:tags:
:category:
:slug: {slug}
:author: Nafiul Islam

#Post goes here
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The great thing about fabric is how easy it makes writing command line arguments. So,
if I wanted to create a file with say &lt;tt class="docutils literal"&gt;{year}_{month}_{day}_{title}&lt;/tt&gt;, I'd just do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fab make_entry:&amp;#39;My awesome title here&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that &lt;em&gt;is&lt;/em&gt; awesome! :D&lt;/p&gt;
</summary><category term="firsts"></category><category term="post"></category><category term="fabric"></category><category term="python"></category></entry></feed>